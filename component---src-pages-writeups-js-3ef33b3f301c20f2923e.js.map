{"version":3,"sources":["webpack:///./src/pages/writeups.js","webpack:///./src/components/SEO.js"],"names":["__webpack_exports__","_ref","data","location","_useState2","useState","selectedProblemType","setSelectedProblemType","_useSelectedCTF","_useState","selectedCTF","setSelectedCTF","useEffect","console","log","useSelectedCTF","_useState3","selectedAuthor","setSelectedAuthor","writeups","allSitePage","edges","filter","_ref2","node","path","match","length","map","_ref3","Writeup","authors","w","author","elem","pos","arr","indexOf","problemTypes","problemType","ctfNames","ctfName","non_writeups","_ref4","warn","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_2__","_components_SEO__WEBPACK_IMPORTED_MODULE_3__","title","style","margin","minHeight","rebass__WEBPACK_IMPORTED_MODULE_4__","flexWrap","mx","m","fontSize","color","onChange","e","target","value","undefined","key","justifyContent","alignItems","writeup","idx","href","textDecoration","className","styles","card","background","getBG","p","bg","borderRadius","boxShadow","problemName","query","SEO","description","lang","meta","keywords","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","render","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","concat","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"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","file":"component---src-pages-writeups-js-3ef33b3f301c20f2923e.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/SEO\"\nimport { Flex, Box, Card } from 'rebass'\nimport styles from '../styles/writeups.module.css'\nimport Writeup from '../models/Writeup'\n\n\nconst useSelectedCTF = () => {\n  const [selectedCTF, setSelectedCTF] = useState()\n  useEffect(() => console.log('a different CTF was selected'), [selectedCTF])\n  return [selectedCTF, setSelectedCTF]\n}\n\n\nexport default ({ data, location }) => {\n  const [selectedProblemType, setSelectedProblemType] = useState()\n  const [selectedCTF, setSelectedCTF] = useSelectedCTF()\n  const [selectedAuthor, setSelectedAuthor] = useState()\n\n  let writeups = data.allSitePage.edges\n    .filter(({node}) => (node.path.match(/\\//g) || []).length === 5)\n    .map(({node}) => new Writeup(node.path))\n\n  const authors = writeups.map((w) => w.author).filter((elem, pos, arr) => arr.indexOf(elem) === pos)\n  const problemTypes = writeups.map((w) => w.problemType).filter((elem, pos, arr) => arr.indexOf(elem) === pos)\n  const ctfNames = writeups.map((w) => w.ctfName).filter((elem, pos, arr) => arr.indexOf(elem) === pos)\n\n  const non_writeups = data.allSitePage.edges.filter(({node}) => (node.path.match(/\\//g) || []).length !== 5)\n  if (non_writeups.length > 0) {\n    console.warn(\"Some non writeup pages were skipped\")\n    console.warn(non_writeups)\n  }\n\n  if (selectedProblemType && selectedProblemType !== 'All') {\n    writeups = writeups.filter((w) => w.problemType === selectedProblemType)\n  }\n\n  if (selectedCTF && selectedCTF !== 'All') {\n    writeups = writeups.filter((w) => w.ctfName === selectedCTF)\n  }\n\n  if (selectedAuthor && selectedAuthor !== 'All') {\n    writeups = writeups.filter((w) => w.author === selectedAuthor)\n  }\n\n  return (\n    <Layout location={location}>\n      <SEO title=\"Writeups\" />\n      <div style={{margin: '24px auto 64px', minHeight: 640}}>\n        <h1>Writeups</h1>\n        <Flex flexWrap='wrap' mx={-2}>\n          <Box m={2}>\n          <div style={{fontSize: '0.66em', color: 'grey'}}>Type</div>\n            <select onChange={(e) => setSelectedProblemType(e.target.value)}>\n              <option value={undefined}>All</option>\n              {\n                problemTypes.map((a) =>\n                  <option value={a} key={a}>\n                    {a}\n                  </option>\n                )\n              }\n            </select>\n          </Box>\n          <Box m={2}>\n            <div style={{fontSize: '0.66em', color: 'grey'}}>CTF</div>\n            <select onChange={(e) => setSelectedCTF(e.target.value)}>\n              <option value={undefined}>All</option>\n              {\n                ctfNames.map((a) =>\n                  <option value={a} key={a}>\n                    {a}\n                  </option>\n                )\n              }\n            </select>\n          </Box>\n          <Box m={2}>\n            <div style={{fontSize: '0.66em', color: 'grey'}}>Author</div>\n            <select onChange={(e) => setSelectedAuthor(e.target.value)}>\n              <option value={undefined}>All</option>\n              {\n                authors.map((a) =>\n                  <option value={a} key={a}>\n                    {a}\n                  </option>\n                )\n              }\n            </select>\n          </Box>\n        </Flex>\n        <Flex flexWrap='wrap' mx={-2} justifyContent='center' alignItems='center'>\n          {writeups.map((writeup, idx) =>\n            <a\n              href={writeup.path}\n              style={{\n                color: 'inherit',\n                textDecoration: 'none',\n              }}\n              key={idx}\n            >\n              <Card\n                className={styles.card}\n                style={{\n                  background: writeup.getBG(),\n                }}\n                p={3}\n                m={3}\n                bg='#ffffff'\n                borderRadius={4}\n                boxShadow='0 0 4px rgba(0, 0, 0, 0.16)'\n              >\n                <p>{writeup.problemName}</p>\n                <p>{writeup.problemType}</p>\n                <p>{writeup.ctfName}</p>\n                <p>{writeup.author}</p>\n              </Card>\n            </a>\n          )}\n        </Flex>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allSitePage(\n      filter: {\n        path: {\n          regex: \"/.*\\/writeups\\/.+$/i\"\n        }\n      },\n    ) {\n      edges {\n        node {\n          id\n          path\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}