{"pageContext":{"html":"<p><a href=\"ctf=csaw-quals-2015\"></a>\n<a href=\"type=forensics\"></a>\n<a href=\"tags=packet,\"></a>\n<a href=\"tools=wireshark\"></a>\n<a href=\"techniques=\"></a></p>\n<p>We are given a <a href=\"\">pcap</a> file.\nOn viewing in Wireshark and looking around we see some python code. Follow the TCP stream to get <a href=\"/transfer-4e0795701ea528d5ffbda7da0da53c77.py\">file</a></p>\n<p>`<code></code>python\nimport string\nimport random\nfrom base64 import b64encode, b64decode</p>\n<p>FLAG = 'flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}'</p>\n<p>enc_ciphers = ['rot13', 'b64e', 'caesar']</p>\n<h1>dec_ciphers = ['rot13', 'b64d', 'caesard']</h1>\n<p>def rot13(s):\n_rot13 = string.maketrans(\"ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz\",\"NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm\")\nreturn string.translate(s, _rot13)</p>\n<p>def b64e(s):\nreturn b64encode(s)</p>\n<p>def caesar(plaintext, shift=3):\nalphabet = string.ascii<em>lowercase\nshifted</em>alphabet = alphabet[shift:] + alphabet[:shift]\ntable = string.maketrans(alphabet, shifted_alphabet)\nreturn plaintext.translate(table)</p>\n<p>def encode(pt, cnt=5):\ntmp = '2{}'.format(b64encode(pt))\nfor cnt in xrange(cnt):\nc = random.choice(enc<em>ciphers)\ni = enc</em>ciphers.index(c) + 1\n_tmp = globals()<a href=\"tmp\">c</a>\ntmp = '{}{}'.format(i, _tmp)\nprint tmp,c,i</p>\n<pre><code>return tmp\n</code></pre>\n<p>if <strong>name</strong> == '<strong>main</strong>':\nprint encode(FLAG)</p>\n<h1>2Mk16Sk5iakYxVFZoS1RsWnZXbFZaYjFaa1prWmFkMDVWVGs1U2IyODFXa1ZuTUZadU1YVldiVkphVFVaS1dGWXlkbUZXTVdkMVprWnJWMlZHYz...</h1>\n<p>`<code></code>\nWe also see a long string(redacted). This is the cipher text generated from the above code and its easy to reverse.\nEvery block has a number (1,2 or 3) followed by sometext, we can easily convert it back.</p>\n<p>Here is the <a href=\"/solve-f45e7dcedfef8067dc4a3b90f9ef62cc.py\">script</a> for same.</p>\n<p>`<code></code>python\nimport string\nimport random\nfrom base64 import b64encode, b64decode\ndef rot13(s):\n_rot13 = string.maketrans(\"NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm\",\"ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz\")\nreturn string.translate(s, _rot13)</p>\n<p>def b64e(s):\nreturn b64decode(s)</p>\n<p>def caesar(plaintext, shift=-3):\nalphabet = string.ascii<em>lowercase\nshifted</em>alphabet = alphabet[shift:] + alphabet[:shift]\ntable = string.maketrans(alphabet, shifted_alphabet)\nreturn plaintext.translate(table)</p>\n<p>a='''2Mk16Sk5iakYxVFZoS1RsWnZXbFZaYjFaa1prWmFkMDVWVGs1U2IyODFXa1ZuTUZa...'''</p>\n<p>def decrypt(s):\nif int(s[0])==1:\nreturn rot13(s[1:])\nif int(s[0])==2:\nreturn b64e(s[1:])\nif int(s[0])==3:\nreturn caesar(s[1:])</p>\n<p>for i in range(80):\ntry:\na=decrypt(a)\nexcept:\npass\nprint a\n`<code></code></p>\n<p>will give us flag</p>\n<blockquote>\n<p>flag{li0ns<em>and</em>tig3rs<em>4nd</em>b34rs<em>0h</em>mi}</p>\n</blockquote>","relativePath":"writeups/csaw-quals-2015/forensics/transfer/sudhackar"}}