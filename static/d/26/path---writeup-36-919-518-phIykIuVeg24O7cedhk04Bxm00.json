{"pageContext":{"html":"<p><a href=\"ctf=blaze-2018\"></a>\n<a href=\"type=re\"></a>\n<a href=\"tags=game\"></a>\n<a href=\"techniques=bruteforce\"></a></p>\n<h1>magic-re (re-420)</h1>\n<pre><code>One binary, two challenges - double the fun\n\nmagic-re: Reverse me | magic-pwn: Pwn me\n\nNote: for magic-re, 4 flags can work, but only one makes sense and is the one to be submitted.\n\nAuthor : DuSu\n\nSolves : ~35\n</code></pre>\n<p>This was an interesting chall, but due to a side channel it was easier to brute force this like the other RE chall.\nThe input given was put into a code template and then executed byte by byte. The instructions allowed were</p>\n<pre><code class=\"language-python\">>>> from pwn import *\n>>> for i in xrange(0x40, 0x60):\n...     print i, disasm(chr(i))\n... \n64    0:   40                      inc    eax\n65    0:   41                      inc    ecx\n66    0:   42                      inc    edx\n67    0:   43                      inc    ebx\n68    0:   44                      inc    esp\n69    0:   45                      inc    ebp\n70    0:   46                      inc    esi\n71    0:   47                      inc    edi\n72    0:   48                      dec    eax\n73    0:   49                      dec    ecx\n74    0:   4a                      dec    edx\n75    0:   4b                      dec    ebx\n76    0:   4c                      dec    esp\n77    0:   4d                      dec    ebp\n78    0:   4e                      dec    esi\n79    0:   4f                      dec    edi\n80    0:   50                      push   eax\n81    0:   51                      push   ecx\n82    0:   52                      push   edx\n83    0:   53                      push   ebx\n84    0:   54                      push   esp\n85    0:   55                      push   ebp\n86    0:   56                      push   esi\n87    0:   57                      push   edi\n88    0:   58                      pop    eax\n89    0:   59                      pop    ecx\n90    0:   5a                      pop    edx\n91    0:   5b                      pop    ebx\n92    0:   5c                      pop    esp\n93    0:   5d                      pop    ebp\n94    0:   5e                      pop    esi\n95    0:   5f                      pop    edi\n</code></pre>\n<p>based on how we manipulate stack/registers the context was then compared to an already saved state later. Since this was <code>memcmp</code> check it made me guess the key byte by byte.</p>\n<p>First I LD_PRELOAD the implementation of <code>memcmp</code> such that it returns the number of bytes matched. Then based on the result I can deduce the best char for an iteration.</p>\n<p>peloaded memcmp, built as a .so to LD_PRELOAD</p>\n<pre><code class=\"language-c\">int memcmp(const char *s1, const char *s2, int n){\n    int i;\n    int cnt = 0;\n    for(i=0; i &#x3C; n; ++i){\n        if(s1[i] == s2[i]) cnt++;\n        else break;\n    }\n    return cnt;\n}\n</code></pre>\n<p>driver script to bruteforce byte by byte</p>\n<pre><code class=\"language-python\">import subprocess\n\nprev = \"^_^ONE_BYTE_INSTRUCTION_FLAG_IZ_CLASSY_AND_FUN\"\nfor _ in xrange(20):\n    cnt = []\n    for i in xrange(0x40,0x60):\n        open(\"input\", \"w+\").write(prev+chr(i)) \n        d = subprocess.Popen(\"gdb -q -x ./magic.py \", shell=True, stdout=subprocess.PIPE).stdout.read().strip()\n        try:\n            c = int(d.split(\":::::\")[1])\n        except:\n            c = -1\n        cnt.append((c, i))\n    best = sorted(cnt ,key=lambda x: x[0], reverse=True)[0]\n    prev += chr(best[1])\n    print prev, best \n</code></pre>\n<p>gdb script to check the value of memcmp</p>\n<pre><code class=\"language-python\">import gdb\n\nclass MyBreakpoint(gdb.Breakpoint):\n    def stop (self):\n        eax = int(gdb.parse_and_eval(\"$eax\").cast(gdb.lookup_type('uint32_t')))\n        print(\":::::%d:::::\" % eax)\n        return False\n\ngdb.execute('file ./magic')\ngdb.execute(\"set environment LD_PRELOAD /tmp/memcmp.so\")\ngdb.execute(\"set verbose off\")\nMyBreakpoint(\"*0x8048947\")\ngdb.execute(\"run &#x3C; input > output\")\ngdb.execute(\"set confirm off\")\ngdb.execute('quit')\n</code></pre>"}}