{"pageContext":{"html":"<p><a href=\"ctf=ekoparty-2015\"></a>\n<a href=\"type=reverse\"></a>\n<a href=\"tags=\"></a>\n<a href=\"tools=retdec\"></a>\n<a href=\"techniques=decompilation\"></a></p>\n<p>So we have <a href=\"/reversing25-b6772941b1e86e8b5e179937908f51da.zip\">zip</a>\nOn extracting it we get a single file.</p>\n<pre><code class=\"language-sh\">$ file GIFT.exe \nGIFT.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows\n</code></pre>\n<p>PE32! we give it to <a href=\"https://retdec.com/decompilation/\">retdec</a> for decompilation.\nAnd we get <a href=\"/GIFT-9a22773402eed5714c6480ecab7fd9cb.c\">GIFT.c</a>.</p>\n<p>Going through the code we see something.</p>\n<pre><code class=\"language-c\">            if (*v3 == 69) {\n                // 0x401c2d\n                if (*(char *)(g6 + 1) == 75) {\n                    // 0x401c33\n                    if (*(char *)(g6 + 2) == 79) {\n                        // 0x401c39\n                        if (*(char *)(g6 + 3) == 123) {\n                            // 0x401c3f\n                            if (*(char *)(g6 + 4) == 116) {\n                                // 0x401c45\n                                if (*(char *)(g6 + 5) == 104) {\n                                    // 0x401c4b\n                                    if (*(char *)(g6 + 6) == 105) {\n                                        // 0x401c51\n                                        if (*(char *)(g6 + 7) == 115) {\n                                            // 0x401c57\n                                            if (*(char *)(g6 + 8) == 95) {\n                                                // 0x401c5d\n                                                if (*(char *)(g6 + 9) == 105) {\n                                                    // 0x401c63\n                                                    if (*(char *)(g6 + 10) == 115) {\n                                                        // 0x401c69\n                                                        if (*(char *)(g6 + 11) == 95) {\n                                                            // 0x401c6f\n                                                            if (*(char *)(g6 + 12) == 97) {\n                                                                // 0x401c75\n                                                                if (*(char *)(g6 + 13) == 95) {\n                                                                    // 0x401c7b\n                                                                    if (*(char *)(g6 + 14) == 103) {\n                                                                        // 0x401c81\n                                                                        if (*(char *)(g6 + 15) == 105) {\n                                                                            // 0x401c87\n                                                                            if (*(char *)(g6 + 16) == 102) {\n                                                                                // 0x401c8d\n                                                                                if (*(char *)(g6 + 17) == 116) {\n                                                                                    // 0x401c97\n                                                                                    if (*(char *)(g6 + 18) == 125) {\n                                                                                        // 0x401ca1\n                                                                                        printf(\"Great! your flag is %s\\n\", v3);\n                                                                                    }\n</code></pre>\n<p>Looks like ascii values are hardcoded.</p>\n<pre><code class=\"language-python\">flag=[69,75,79,1123,116,104,105,115,95,105,115,95,97,95,103,105,102,116,125]\nprint ''.join(chr(i) for i in flag)\n</code></pre>\n<p>gives us FLAG</p>\n<blockquote>\n<p>EKO{this<em>is</em>a_gift}</p>\n</blockquote>"}}