{"pageContext":{"html":"<p><a href=\"ctf=tum-ctf-teaser-2015\"></a>\n<a href=\"type=rev\"></a>\n<a href=\"tags=xtea\"></a>\n<a href=\"tool=pwntools\"></a></p>\n<h1>whitebox crypto (rev 20)</h1>\n<p>So we have an <a href=\"/xtea-293e91f132fabcb91d8976185d5c303a.\">executable</a></p>\n<p>Problem statement\n<code>Do not panic, it's only XTEA! I wonder what the key was...</code></p>\n<p>Little bit of google we get this piece of code from <a href=\"https://en.wikipedia.org/wiki/XTEA\">Wikipedia</a>\n<code>c void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) { unsigned int i; uint32_t v0=v[0], v1=v[1], sum=0, delta=0x9E3779B9; for (i=0; i &#x3C; num_rounds; i++) { v0 += (((v1 &#x3C;&#x3C; 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum &#x26; 3]); sum += delta; v1 += (((v0 &#x3C;&#x3C; 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum>>11) &#x26; 3]); } v[0]=v0; v[1]=v1; }</code>\nGiven file\n<code>bash $ file ./xtea ./xtea: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=331f96cc8eefbf07d5752cf9e8cf4facb32ba8ff, not stripped</code></p>\n<p>A little bit of analysis shows we have to give something as argv[1] of length 16 as input</p>\n<p><code>bash $ ./xtea AAAAAAAAAAAAAAAA 4a584fe6 116e650b</code></p>\n<p>It returns the input \"encrypted\". We have to find the key.\nThe code from Wikipedia says key[4] would be having 4 blocks of length 4. So the key is of length 16.\nsum=0 at the start of the process and it cumulatively adds delta to it which is added to key[i] in some fashion.\nWe see an encipher function in the file.</p>\n<p>`<code></code>objdump\ngdb-peda$ pdisass encipher\nDump of assembler code for function encipher:\n0x00000000004005a0 &#x3C;+0>:\t\tmov    ecx,DWORD PTR [rdi+0x4]\n0x00000000004005a3 &#x3C;+3>:\t\tpush   r12\n0x00000000004005a5 &#x3C;+5>:\t\tpush   rbp\n0x00000000004005a6 &#x3C;+6>:\t\tpush   rbx\n0x00000000004005a7 &#x3C;+7>:\t\tmov    edx,ecx\n0x00000000004005a9 &#x3C;+9>:\t\tmov    eax,ecx\n0x00000000004005ab &#x3C;+11>:\tshr    edx,0x5\n0x00000000004005ae &#x3C;+14>:\tshl    eax,0x4\n0x00000000004005b1 &#x3C;+17>:\txor    eax,edx\n0x00000000004005b3 &#x3C;+19>:\tadd    eax,ecx\n0x00000000004005b5 &#x3C;+21>:\txor    eax,0x7b707868\n0x00000000004005ba &#x3C;+26>:\tadd    eax,DWORD PTR [rdi]\n0x00000000004005bc &#x3C;+28>:\tmov    r10d,eax\n0x00000000004005bf &#x3C;+31>:\tmov    edx,eax\n0x00000000004005c1 &#x3C;+33>:\tshl    eax,0x4\n0x00000000004005c4 &#x3C;+36>:\tshr    r10d,0x5\n0x00000000004005c8 &#x3C;+40>:\txor    r10d,eax\n0x00000000004005cb &#x3C;+43>:\tadd    r10d,edx\n0x00000000004005ce &#x3C;+46>:\txor    r10d,0x1b58ea2e\n0x00000000004005d5 &#x3C;+53>:\tlea    r11d,[r10+rcx*1]\n0x00000000004005d9 &#x3C;+57>:\tmov    r9d,r11d\n0x00000000004005dc &#x3C;+60>:\tmov    eax,r11d\n0x00000000004005df &#x3C;+63>:\tshl    eax,0x4\n0x00000000004005e2 &#x3C;+66>:\tshr    r9d,0x5\n0x00000000004005e6 &#x3C;+70>:\txor    r9d,eax\n0x00000000004005e9 &#x3C;+73>:\tadd    r9d,r11d\n0x00000000004005ec &#x3C;+76>:\txor    r9d,0xba9ae30\n0x00000000004005f3 &#x3C;+83>:\tlea    eax,[r9+rdx*1]\n0x00000000004005f7 &#x3C;+87>:\tmov    r12d,eax\n0x00000000004005fa &#x3C;+90>:\tmov    edx,eax\n0x00000000004005fc &#x3C;+92>:\tshl    edx,0x4\n0x00000000004005ff &#x3C;+95>:\tshr    r12d,0x5\n0x0000000000400603 &#x3C;+99>:\txor    r12d,edx\n0x0000000000400606 &#x3C;+102>:\tadd    r12d,eax\n0x0000000000400609 &#x3C;+105>:\txor    r12d,0x9bd661db\n0x0000000000400610 &#x3C;+112>:\tlea    r10d,[r12+r11*1]\n0x0000000000400614 &#x3C;+116>:\tmov    r8d,r10d\n0x0000000000400617 &#x3C;+119>:\tmov    edx,r10d\n0x000000000040061a &#x3C;+122>:\tshl    edx,0x4\n0x000000000040061d &#x3C;+125>:\tshr    r8d,0x5\n0x0000000000400621 &#x3C;+129>:\txor    r8d,edx\n0x0000000000400624 &#x3C;+132>:\tadd    r8d,r10d\n0x0000000000400627 &#x3C;+135>:\txor    r8d,0x9bd661db\n0x000000000040062e &#x3C;+142>:\tlea    r9d,[r8+rax*1]\n0x0000000000400632 &#x3C;+146>:\tmov    ebp,r9d\n0x0000000000400635 &#x3C;+149>:\tmov    eax,r9d\n0x0000000000400638 &#x3C;+152>:\tshl    eax,0x4\n0x000000000040063b &#x3C;+155>:\tshr    ebp,0x5\n0x000000000040063e &#x3C;+158>:\txor    ebp,eax\n0x0000000000400640 &#x3C;+160>:\tadd    ebp,r9d\n0x0000000000400643 &#x3C;+163>:\txor    ebp,0x4818a1a2\n0x0000000000400649 &#x3C;+169>:\tlea    r12d,[rbp+r10*1+0x0]\n.\n.\n.</p>\n<p>`<code></code>\nLooking at it we can say the key is hardcoded here.\nSo we start with sum=0 and keep it increasing by delta .The hardcoded values in hex are (sum + key[sum &#x26; 3]) and (sum + key[(sum>>11) &#x26; 3])\nLittle bit of unpacking to do.</p>\n<p>`<code></code>python</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>from pwn import *\np32(0x7b707868)\n'hxp{'\ndelta=0x9e3779b9\np32((0x1b58ea2e-delta)&#x26;0xffffffff)\n'up!}'\np32((0xba9ae30-delta)&#x26;0xffffffff)\n'w4rm'\np32((0x9bd661db-delta*2)&#x26;0xffffffff)\n'ing_'\n`<code></code></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>gives us flag</p>\n<blockquote>\n<p>hxp{w4rming_up!}</p>\n</blockquote>","relativePath":"writeups/tum-ctf-teaser-2015/rev/whitebox crypto/sudhackar"}}