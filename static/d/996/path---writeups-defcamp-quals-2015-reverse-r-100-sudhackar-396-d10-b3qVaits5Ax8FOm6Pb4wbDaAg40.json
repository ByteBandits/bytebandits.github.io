{"pageContext":{"html":"<p><a href=\"ctf=defcamp-quals-2015\"></a>\n<a href=\"type=reverse\"></a>\n<a href=\"tags=shift-cipher\"></a></p>\n<p>We are given a <a href=\"/r100-7f24336a9475b4a6a79086f29ec0949a.bin\">binary</a>.</p>\n<pre><code class=\"language-bash\">$ file r100.bin \nr100.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=0f464824cc8ee321ef9a80a799c70b1b6aec8168, stripped\n</code></pre>\n<p>On running it asks for a password and checks it.</p>\n<pre><code class=\"language-bash\">$ ./r100.bin \nEnter the password: AAAAAA\nIncorrect password!\n</code></pre>\n<p>A quick strace shows its protected from debugging using <a href=\"https://en.wikipedia.org/wiki/Ptrace\">ptrace</a>.</p>\n<pre><code class=\"language-bash\">$ strace ./r100.bin \n.\n.\nptrace(PTRACE_TRACEME, 0, 0, 0)         = -1 EPERM (Operation not permitted)\n</code></pre>\n<p>So gdb won't work normally. The technique I used involved changing the return value in runtime during gdb debugging.</p>\n<pre><code class=\"language-bash\">$ objdump -d sep_15/d-ctf/r100.bin | grep \\&#x3C;ptrace@plt\\>\n0000000000400600 &#x3C;ptrace@plt>:\n  4007da:   e8 21 fe ff ff          callq  400600 &#x3C;ptrace@plt>\n</code></pre>\n<pre><code class=\"language-bash\">gdb-peda$ b *0x4007df\nBreakpoint 1 at 0x4007df\ngdb-peda$ r\n.\n.\ngdb-peda$ set $rax=0\n</code></pre>\n<p>This will do the job. Now back to reversing.\nA brief decompilation gives us </p>\n<pre><code class=\"language-c\">int check(char *input)\n{\n  int i;\n  char p1[8] = \"Dufhbmf\"; // [bp-20h]\n  char p2[8] = \"pG`imos\"; // [bp-18h]\n  char p3[8] = \"ewUglpt\"; // [bp-10h]\n  for ( i = 0; i &#x3C;= 11; ++i )\n  {\n    if ( p1[8 * (i % 3)] + 2 * (i / 3)) - (input[i]) != 1 )\n      return 1;\n  }\n  return 0;\n}\n</code></pre>\n<p>It is checking our input against the values in the fashion given above. The only effective chars we need </p>\n<blockquote>\n<p>Dpef`Ubmlfst </p>\n</blockquote>\n<p>Our password should be 1 less than each of chars.</p>\n<pre><code class=\"language-bash\">$ python -c \"print (''.join(chr(ord(i)-1) for i in 'Dpef\\`Ubmlfst'))\"\nCode_Talkers\n</code></pre>\n<p>Flag</p>\n<blockquote>\n<p>Code_Talkers</p>\n</blockquote>","relativePath":"writeups/defcamp-quals-2015/reverse/r100/sudhackar"}}