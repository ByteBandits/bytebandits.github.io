{"pageContext":{"html":"<p><a href=\"ctf=internetwasche-ctf-2016\"></a>\n<a href=\"type=code\"></a>\n<a href=\"tags=bot,crypto,math\"></a>\n<a href=\"tools=sympy\"></a>\n<a href=\"techniques=\"></a></p>\n<h1>A Numbers Game II (code-70)</h1>\n<blockquote>\n<p>Math is used in cryptography, but someone got this wrong. Can you still solve the equations? Hint: You need to encode your answers.</p>\n</blockquote>\n<p>We are given the following information in a flag:</p>\n<blockquote>\n<p>This snippet may help:</p>\n<pre><code class=\"language-python\">    def encode(self, eq):\n        out = []\n        for c in eq:\n            q = bin(self._xor(ord(c),(2&#x3C;&#x3C;4))).lstrip(\"0b\")\n            q = \"0\" * ((2&#x3C;&#x3C;2)-len(q)) + q\n            out.append(q)\n        b = ''.join(out)\n        pr = []\n        for x in range(0,len(b),2):\n            c = chr(int(b[x:x+2],2)+51)\n            pr.append(c)\n        s = '.'.join(pr)\n        return s\n</code></pre>\n</blockquote>\n<p>Now we have a service running on 188.166.133.53:11071, which gives messages like this</p>\n<blockquote>\n<p>Hi, I like math and cryptography. Can you talk to me?!\nLevel 1.: 4.4.5.3.3.3.3.3.3.3.6.4.3.3.3.3.3.4.3.4.3.4.3.3.3.3.3.3.3.4.6.4.3.3.3.3.3.3.6.4.3.4.4.5</p>\n</blockquote>\n<p>Obviously, to be able to reply, we need to be able to understand the encoded message.\nWe need to write a decoding function before we can proceed further. So, let's do that.</p>\n<p>The given encoding function does the following things to encode a string:</p>\n<ol>\n<li>Consider the string as a byte-stream and XOR with 32 for each byte</li>\n<li>\n<p>Consider the string as a crumb-stream (crumb=2 bits) and replace each crumb with the following:</p>\n<ol>\n<li>if 00, replace it with character '3' </li>\n<li>if 01, replace it with character '4'</li>\n<li>if 10, replace it with character '5'</li>\n<li>if 11, replace it with character '6'</li>\n</ol>\n</li>\n<li>Join all these characters with '.' in between</li>\n</ol>\n<p>Therefore, to decode this we simply do the reverse:</p>\n<ol>\n<li>Split the characters with '.' in between them</li>\n<li>\n<p>Create a crumb-stream by replacing each character with respective crumb:</p>\n<ol>\n<li>if character is '3', replace it with the crumb 00 </li>\n<li>if character is '4', replace it with the crumb 01</li>\n<li>if character is '5', replace it with the crumb 10</li>\n<li>if character is '6', replace it with the crumb 11</li>\n</ol>\n</li>\n<li>Consider the crumb-stream as a byte-stream and XOR with 32 for each byte</li>\n<li>Return as a string</li>\n</ol>\n<p>Great, now lets decode the original message and see what's in there:</p>\n<pre><code class=\"language-python\">>>> decode('4.4.5.3.3.3.3.3.3.3.6.4.3.3.3.3.3.4.3.4.3.4.3.3.3.3.3.3.3.4.6.4.3.3.3.3.3.3.6.4.3.4.4.5')\n'x - 10 = -6'\n</code></pre>\n<p>An algebraic equation! Looks like we need to send the value of x which satisfies the given equation.</p>\n<p>So,  quickly <a href=\"/main-c9ddb4e4c8fa38fefa7d3afbdc61abf6.py\">wrote a script</a> using the <a href=\"http://www.sympy.org/\">SymPy</a> library which automatically solves the given levels. We let it run for 100 levels..</p>\n<p>Aaand there's our flag:</p>\n<blockquote>\n<p>IW{Crypt0_c0d3}</p>\n</blockquote>","relativePath":"writeups/internetwache-ctf-2016/code/a-numbers-game-2/chaitan94"}}