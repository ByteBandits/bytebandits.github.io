{"pageContext":{"html":"<p><a href=\"ctf=blaze-2018\"></a>\n<a href=\"type=re\"></a>\n<a href=\"tags=game\"></a>\n<a href=\"techniques=bruteforce\"></a></p>\n<h1>magic-re (re-420)</h1>\n<p>`<code></code>\nOne binary, two challenges - double the fun</p>\n<p>magic-re: Reverse me | magic-pwn: Pwn me</p>\n<p>Note: for magic-re, 4 flags can work, but only one makes sense and is the one to be submitted.</p>\n<p>Author : DuSu</p>\n<p>Solves : ~35\n`<code></code></p>\n<p>This was an interesting chall, but due to a side channel it was easier to brute force this like the other RE chall.\nThe input given was put into a code template and then executed byte by byte. The instructions allowed were</p>\n<p>`<code></code>python</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>from pwn import *\nfor i in xrange(0x40, 0x60):\n...     print i, disasm(chr(i))\n...\n64    0:   40                      inc    eax\n65    0:   41                      inc    ecx\n66    0:   42                      inc    edx\n67    0:   43                      inc    ebx\n68    0:   44                      inc    esp\n69    0:   45                      inc    ebp\n70    0:   46                      inc    esi\n71    0:   47                      inc    edi\n72    0:   48                      dec    eax\n73    0:   49                      dec    ecx\n74    0:   4a                      dec    edx\n75    0:   4b                      dec    ebx\n76    0:   4c                      dec    esp\n77    0:   4d                      dec    ebp\n78    0:   4e                      dec    esi\n79    0:   4f                      dec    edi\n80    0:   50                      push   eax\n81    0:   51                      push   ecx\n82    0:   52                      push   edx\n83    0:   53                      push   ebx\n84    0:   54                      push   esp\n85    0:   55                      push   ebp\n86    0:   56                      push   esi\n87    0:   57                      push   edi\n88    0:   58                      pop    eax\n89    0:   59                      pop    ecx\n90    0:   5a                      pop    edx\n91    0:   5b                      pop    ebx\n92    0:   5c                      pop    esp\n93    0:   5d                      pop    ebp\n94    0:   5e                      pop    esi\n95    0:   5f                      pop    edi\n`<code></code>\nbased on how we manipulate stack/registers the context was then compared to an already saved state later. Since this was <code>memcmp</code> check it made me guess the key byte by byte.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>First I LD_PRELOAD the implementation of <code>memcmp</code> such that it returns the number of bytes matched. Then based on the result I can deduce the best char for an iteration.</p>\n<p>peloaded memcmp, built as a .so to LD_PRELOAD</p>\n<p>`<code></code>c\nint memcmp(const char *s1, const char *s2, int n){\nint i;\nint cnt = 0;\nfor(i=0; i &#x3C; n; ++i){\nif(s1[i] == s2[i]) cnt++;\nelse break;\n}\nreturn cnt;\n}</p>\n<p>`<code></code></p>\n<p>driver script to bruteforce byte by byte</p>\n<p>`<code></code>python\nimport subprocess</p>\n<p>prev = \"^<em>^ONE</em>BYTE<em>INSTRUCTION</em>FLAG<em>IZ</em>CLASSY<em>AND</em>FUN\"\nfor _ in xrange(20):\ncnt = []\nfor i in xrange(0x40,0x60):\nopen(\"input\", \"w+\").write(prev+chr(i))\nd = subprocess.Popen(\"gdb -q -x ./magic.py \", shell=True, stdout=subprocess.PIPE).stdout.read().strip()\ntry:\nc = int(d.split(\":::::\")[1])\nexcept:\nc = -1\ncnt.append((c, i))\nbest = sorted(cnt ,key=lambda x: x[0], reverse=True)[0]\nprev += chr(best[1])\nprint prev, best\n`<code></code></p>\n<p>gdb script to check the value of memcmp</p>\n<p>`<code></code>python</p>\n<p>import gdb</p>\n<p>class MyBreakpoint(gdb.Breakpoint):\ndef stop (self):\neax = int(gdb.parse<em>and</em>eval(\"$eax\").cast(gdb.lookup<em>type('uint32</em>t')))\nprint(\":::::%d:::::\" % eax)\nreturn False</p>\n<p>gdb.execute('file ./magic')\ngdb.execute(\"set environment LD_PRELOAD /tmp/memcmp.so\")\ngdb.execute(\"set verbose off\")\nMyBreakpoint(\"*0x8048947\")\ngdb.execute(\"run &#x3C; input > output\")\ngdb.execute(\"set confirm off\")\ngdb.execute('quit')\n`<code></code></p>","relativePath":"writeups/blaze-ctf-2018/re/magic-re/sudhackar"}}