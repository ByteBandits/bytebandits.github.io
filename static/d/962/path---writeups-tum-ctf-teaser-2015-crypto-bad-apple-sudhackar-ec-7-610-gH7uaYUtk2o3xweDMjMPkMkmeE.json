{"pageContext":{"html":"<p><a href=\"ctf=tum-ctf-teaser-2015\"></a>\n<a href=\"type=crypto\"></a>\n<a href=\"tags=hash-length-extension-attack\"></a>\n<a href=\"tool=hashpump\"></a></p>\n<h1>bad_apple (crypto 15)</h1>\n<p>`<code></code>\nBaby's 1st</p>\n<p>ctf.link/assets/downloads/cry/bad_apple.tar.xz</p>\n<p>try:\nncat 1.ctf.link 1027 &#x3C; good.bin\nexpect:\n\"hello\"\n`<code></code></p>\n<p>We are given a <a href=\"/bad_apple.tar-c2ca1970d13a6b6b43fbaebd76a1e6f5.xz\">tar archive</a>\nIt has a python file which is probably the source of the service</p>\n<p>`<code></code>python</p>\n<h1>!/usr/bin/env python3</h1>\n<p>import sys, binascii\nfrom Crypto.Hash import SHA256</p>\n<p>key = open('key.bin', 'rb').read()</p>\n<p>message = sys.stdin.buffer.read(0x100)\nif len(message) &#x3C; SHA256.digest_size:\nprint('len')\nexit(0)</p>\n<p>tag, message = message[:SHA256.digest_size], message[SHA256.digest_size:]</p>\n<p>if SHA256.new(key + message).digest() != tag:\nprint('bad')\nexit(0)</p>\n<p>if b'hello pls' in message:\nprint('hello')\nif b'flag pls' in message:\nprint(open('flag.txt', 'r').read())\n`<code></code></p>\n<p>Also </p>\n<p>`<code></code>bash\n$ xxd good.bin\n0000000: 2628 455f 6617 ecea 0248 95a4 8578 ebce  &#x26;(E_f....H...x..\n0000010: 00fa 9204 983d 09b6 d175 7d05 dc43 0567  .....=...u}..C.g\n0000020: 6865 6c6c 6f20 706c 73                   hello pls\n<code></code></p>\n<p>We see that the service uses sha256 to verify the signature and then process the message.\nWe can use hash <a href=\"https://en.wikipedia.org/wiki/Length_extension_attack\">Length Extension Attack</a> to verify a request with a message 'flag pls'.</p>\n<p>I use <a href=\"https://github.com/bwall/HashPump\">hashpump</a> to do the same. There is no information about the key. Hashpump needs a key length for the attack. We'll bruteforce that.</p>\n<p><code>python import hashpumpy original='hello pls' add='flag pls' hash_old='2628455f6617ecea024895a48578ebce00fa9204983d09b6d1757d05dc430567' limit=100 for i in xrange(limit): f=open('lol/'+str(i),'w') l=hashpumpy.hashpump(hash_old,original,add,i) f.write(l[0].decode('hex')+l[1]) f.close()</code></p>\n<p>will five me hundred files in lol directory.</p>\n<p>`<code></code>bash\n$ for i in {1..100}; do ncat 1.ctf.link 1027 &#x3C; $i ; done\nbad\nbad\n.\n.\nhello\nhxp{M3rkL3<em>D4mg4rd</em>h4s<em>s0m3</em>Pr0bl3mZ}</p>\n<p>bad\n^C\n`<code></code>\nfor keylength 32 it worked.</p>\n<p>Flag</p>\n<blockquote>\n<p>hxp{M3rkL3<em>D4mg4rd</em>h4s<em>s0m3</em>Pr0bl3mZ}</p>\n</blockquote>","relativePath":"writeups/tum-ctf-teaser-2015/crypto/bad_apple/sudhackar"}}