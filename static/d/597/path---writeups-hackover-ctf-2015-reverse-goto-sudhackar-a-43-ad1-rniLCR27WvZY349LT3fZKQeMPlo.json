{"pageContext":{"html":"<p><a href=\"ctf=hackover-2015\"></a>\n<a href=\"type=reverse\"></a>\n<a href=\"tags=reverse,recovery\"></a>\n<a href=\"tools=binwalk,gdb-peda\"></a></p>\n<h1>goto (reverse-150)</h1>\n<p>We have a <a href=\"/goto-03661d1a42ad20065ef6bfbe5a06287c-d11a5f49679dd68b82e42338d26e447a.tgz\">zip</a> file.\nUnzipping it gives us a file goto.bin</p>\n<pre><code class=\"language-bash\">$ file goto.bin \ngoto.bin: data\n</code></pre>\n<p>data is somewhat nasty for a 150 pt challenge. So I used binwalk on it.</p>\n<pre><code class=\"language-bash\">$ binwalk -e goto.bin \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n74            0x4A            gzip compressed data, maximum compression, has original file name: \"rvs\", from Unix, last modified: Thu Oct 15 19:19:35 2015\n\n$ file _goto.bin.extracted/rvs \n_goto.bin.extracted/rvs: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), for GNU/Linux 2.6.24, dynamically linked, interpreter \\004, stripped\n</code></pre>\n<p>This could work.</p>\n<pre><code class=\"language-bash\">$ ./rvs\nPASSWORD:sudhackar\n\nACCESS DENIED\n</code></pre>\n<p>I have observed it in many CTFs that how much has gdb-peda made the problems trivial to solve. So we quickly load it in gdb-peda and step through the program.</p>\n<pre><code class=\"language-bash\">gdb-peda$ b *0x400630\nBreakpoint 1 at 0x400630\ngdb-peda$ b *0x4006aa\nBreakpoint 2 at 0x4006aa\n</code></pre>\n<p>After some running and stepping.</p>\n<pre><code class=\"language-bash\">gdb-peda$ c\nContinuing.\n[----------------------------------registers-----------------------------------]\nRAX: 0x60109e (\"eSODoe#GtrWOEnr$Re1OONnt%Ao5ROIa ^Nr{DaE y&#x26;TCI\\020sDgo#ET_\\020l\\020iu$DFU\\020d\\020v!%\\020_S\\020j\\020e\\020^\\020{E\\020k\\020 \\020&#x26;\\020t_\\020a\\020y\\020(\\020hG\\020s\\020o\\020^\\020iO\\020d\\020u\\020&#x26;\\020sT\\020j\\020 \\020*\\020iO\\020k\\020u\\020^\\020s_\\020l\\020p\\020&#x26;\\020aW\\020a\\020,\\020*\\020dH\\020s\\020 \\020@\\020eE\\020d\\020n\\020#\\020cR\\020j\\020e\\020\\060\\020oE\\020k\\020v\\020$\\020yE\\020l\\020e\\020%\\020}V\\020\"...)\nRBX: 0x7fffffffdfe8 ('A' &#x3C;repeats 16 times>)\nRCX: 0x4141414141414176 ('vAAAAAAA')\nRDX: 0x602015 --> 0x0 \nRSI: 0x7ffff7ff4011 --> 0x0 \nRDI: 0x7fffffffdff9 --> 0x100000000000000 \nRBP: 0x602010 --> 0x6f6b636168 ('hacko')\nRSP: 0x7fffffffdfe0 --> 0x7ffff7a431a8 --> 0xc001200002832 \nRIP: 0x4006aa (cmp    cl,0x10)\nR8 : 0x7ffff7ff4011 --> 0x0 \nR9 : 0x0 \nR10: 0x10 \nR11: 0x246 \nR12: 0x40077f (xor    ebp,ebp)\nR13: 0x7fffffffe120 --> 0x1 \nR14: 0x0 \nR15: 0x0\nEFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x40069e:    mov    eax,0x601068\n   0x4006a3:    add    rax,0x9\n   0x4006a7:    mov    cl,BYTE PTR [rax-0x9]\n=> 0x4006aa:    cmp    cl,0x10\n   0x4006ad:    je     0x4006b6\n   0x4006af:    mov    BYTE PTR [rdx],cl\n   0x4006b1:    inc    rdx\n   0x4006b4:    jmp    0x4006a3\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffdfe0 --> 0x7ffff7a431a8 --> 0xc001200002832 \n0008| 0x7fffffffdfe8 ('A' &#x3C;repeats 16 times>)\n0016| 0x7fffffffdff0 (\"AAAAAAAA\")\n0024| 0x7fffffffdff8 --> 0x0 \n0032| 0x7fffffffe000 --> 0x1 \n0040| 0x7fffffffe008 --> 0x4008dd (add    rbx,0x1)\n0048| 0x7fffffffe010 --> 0xf0b2dd \n0056| 0x7fffffffe018 --> 0x0 \n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 2, 0x00000000004006aa in ?? ()\n</code></pre>\n<p>If we notice RBP we'll se that our flag has started. Some continue's  later:</p>\n<pre><code class=\"language-bash\"> \nContinuing.\n[----------------------------------registers-----------------------------------]\nRAX: 0x6011d0 --> 0x1010107910691010 \nRBX: 0x7fffffffdfe8 ('A' &#x3C;repeats 16 times>)\nRCX: 0x4141414141414110 \nRDX: 0x602037 --> 0x0 \nRSI: 0x7ffff7ff4011 --> 0x0 \nRDI: 0x7fffffffdff9 --> 0x100000000000000 \nRBP: 0x602010 (\"hackover15{I_USE_GOTO_WHEREEVER_I_W4NT}\")\nRSP: 0x7fffffffdfe0 --> 0x7ffff7a431a8 --> 0xc001200002832 \nRIP: 0x4006aa (cmp    cl,0x10)\nR8 : 0x7ffff7ff4011 --> 0x0 \nR9 : 0x0 \nR10: 0x10 \nR11: 0x246 \nR12: 0x40077f (xor    ebp,ebp)\nR13: 0x7fffffffe120 --> 0x1 \nR14: 0x0 \nR15: 0x0\nEFLAGS: 0x212 (carry parity ADJUST zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x40069e:    mov    eax,0x601068\n   0x4006a3:    add    rax,0x9\n   0x4006a7:    mov    cl,BYTE PTR [rax-0x9]\n=> 0x4006aa:    cmp    cl,0x10\n   0x4006ad:    je     0x4006b6\n   0x4006af:    mov    BYTE PTR [rdx],cl\n   0x4006b1:    inc    rdx\n   0x4006b4:    jmp    0x4006a3\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffdfe0 --> 0x7ffff7a431a8 --> 0xc001200002832 \n0008| 0x7fffffffdfe8 ('A' &#x3C;repeats 16 times>)\n0016| 0x7fffffffdff0 (\"AAAAAAAA\")\n0024| 0x7fffffffdff8 --> 0x0 \n0032| 0x7fffffffe000 --> 0x1 \n0040| 0x7fffffffe008 --> 0x4008dd (add    rbx,0x1)\n0048| 0x7fffffffe010 --> 0xf0b2dd \n0056| 0x7fffffffe018 --> 0x0 \n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n\nBreakpoint 2, 0x00000000004006aa in ?? ()\ngdb-peda$ \nContinuing.\n\nACCESS DENIED\n[Inferior 1 (process 18192) exited normally]\nWarning: not running or target is remote\ngdb-peda$ \n</code></pre>\n<p>Flag</p>\n<blockquote>\n<p>hackover15{I<em>USE</em>GOTO<em>WHEREEVER</em>I_W4NT}</p>\n</blockquote>"}}