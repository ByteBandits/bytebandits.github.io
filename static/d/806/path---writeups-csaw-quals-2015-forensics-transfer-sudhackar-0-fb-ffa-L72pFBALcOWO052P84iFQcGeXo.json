{"pageContext":{"html":"<p><a href=\"ctf=csaw-quals-2015\"></a>\n<a href=\"type=forensics\"></a>\n<a href=\"tags=packet,\"></a>\n<a href=\"tools=wireshark\"></a>\n<a href=\"techniques=\"></a></p>\n<p>We are given a <a href=\"\">pcap</a> file.\nOn viewing in Wireshark and looking around we see some python code. Follow the TCP stream to get <a href=\"../transfer.py\">file</a></p>\n<pre><code class=\"language-python\">import string\nimport random\nfrom base64 import b64encode, b64decode\n\nFLAG = 'flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}'\n\nenc_ciphers = ['rot13', 'b64e', 'caesar']\n# dec_ciphers = ['rot13', 'b64d', 'caesard']\n\ndef rot13(s):\n    _rot13 = string.maketrans(\"ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz\",\"NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm\")\n    return string.translate(s, _rot13)\n\ndef b64e(s):\n    return b64encode(s)\n\ndef caesar(plaintext, shift=3):\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    table = string.maketrans(alphabet, shifted_alphabet)\n    return plaintext.translate(table)\n\ndef encode(pt, cnt=5):\n    tmp = '2{}'.format(b64encode(pt))\n    for cnt in xrange(cnt):\n        c = random.choice(enc_ciphers)\n        i = enc_ciphers.index(c) + 1\n        _tmp = globals()[c](tmp)\n        tmp = '{}{}'.format(i, _tmp)\n        print tmp,c,i\n\n    return tmp\n\nif __name__ == '__main__':\n    print encode(FLAG)\n#2Mk16Sk5iakYxVFZoS1RsWnZXbFZaYjFaa1prWmFkMDVWVGs1U2IyODFXa1ZuTUZadU1YVldiVkphVFVaS1dGWXlkbUZXTVdkMVprWnJWMlZHYz...\n</code></pre>\n<p>We also see a long string(redacted). This is the cipher text generated from the above code and its easy to reverse.\nEvery block has a number (1,2 or 3) followed by sometext, we can easily convert it back.</p>\n<p>Here is the <a href=\"solve.py\">script</a> for same.</p>\n<pre><code class=\"language-python\">import string\nimport random\nfrom base64 import b64encode, b64decode\ndef rot13(s):\n    _rot13 = string.maketrans(\"NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm\",\"ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz\")\n    return string.translate(s, _rot13)\n\ndef b64e(s):\n    return b64decode(s)\n\ndef caesar(plaintext, shift=-3):\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    table = string.maketrans(alphabet, shifted_alphabet)\n    return plaintext.translate(table)\n\na='''2Mk16Sk5iakYxVFZoS1RsWnZXbFZaYjFaa1prWmFkMDVWVGs1U2IyODFXa1ZuTUZa...'''\n\ndef decrypt(s):\n    if int(s[0])==1:\n        return rot13(s[1:])\n    if int(s[0])==2:\n        return b64e(s[1:])\n    if int(s[0])==3:\n        return caesar(s[1:])\n\n\nfor i in range(80):\n    try:\n        a=decrypt(a)\n    except:\n        pass\nprint a\n</code></pre>\n<p>will give us flag</p>\n<blockquote>\n<p>flag{li0ns<em>and</em>tig3rs<em>4nd</em>b34rs<em>0h</em>mi}</p>\n</blockquote>"}}