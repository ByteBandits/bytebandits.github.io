{"pageContext":{"html":"<p><a href=\"ctf=whitehat-contest-11-2016\"></a>\n<a href=\"type=rev\"></a>\n<a href=\"tags=py2exe\"></a>\n<a href=\"tool=unpy2exe\"></a></p>\n<h1>RE3 (rev 100)</h1>\n<p>So we have an <a href=\"/digital_fortrees-8b26056ece5452dfcdbbd45fd9e2e93a.exe\">exe file</a></p>\n<p><code>bash $ file digital_fortrees.exe digital_fortrees.exe: PE32 executable (console) Intel 80386, for MS Windows $ strings digital_fortrees.exe !This program cannot be run in DOS mode. . . &#x3C;pythondll> LoadLibrary(pythondll) failed .</code></p>\n<p>This suggests the executable was made using <a href=\"http://www.py2exe.org/\">py2exe</a>. Byte compiled pyc files can be easily fished out from such exe using <a href=\"https://github.com/matiasb/unpy2exe\">unpy2exe</a>. We take out the pyc file and then use <a href=\"https://sourceforge.net/projects/easypythondecompiler/\">Easy Python Decompiler</a> to get</p>\n<p>`<code></code>python</p>\n<h1>Embedded file name: digital_fortrees.py</h1>\n<p>import urllib2</p>\n<p>def main():\nprint \"                                       /\\\\n                                      /<code>:\\\\\\n /</code>'<code>:\\\\\\n /</code>'<code>'</code>:\\\\n                                   /<code>'</code>'<code>'</code>:\\\\n                                  /<code>'</code>'<code>'</code>'<code>:\\\\\\n |</code>'<code>'</code>'<code>:|\\n _ _ _ _ _ |] ,-. :|_ _ _ _\\n ||| || || || | | |_| ||| || || || |\\n |</code>' <code>'</code>' <code>'.| | _'=' |</code>' <code>'</code>' <code>'.|\\n : .:; |'-' : .:;\\n \\\\-..____..:/ _ _ _ _ _ _| _ _'-\\\\-..____..:/\\n :--------:_,' || || || || || || ||</code>.::--------:\\n      |]     .:|:.  <code>'</code>'<em><code>'</code>' <code>'</code>' `'    | '-'  .:|\\n      |  ,-. .[|:.</em>     '-' _<strong>_     _</strong>    |   ,-.'-|\\n      |  | | .:|'--'_     ,'_<strong><em>`.  '---'   |   | |.:|\\n      |  |</em>| .:|:.'--' ()/,| |<code>|</code>.\\()   __  |   |<em>|.:|\\n      |  '=' .:|:.     |::</em>|<em>|</em>|\\|::   '--' |  _'='.:|\\n      | __   .:|:.     ;||-,-,-,-,|;        | '--' .:|\\n      |'--'  .:|:. _  ; ||       |:|        |      .:|\\n      |      .:|:.'-':  ||       |;|     _  |]     _:|\\n      |      '-|:.   ;  ||       :||    '-' |     '--|\\n      |  _   .:|].  ;   ||       ;||]       |   _  .:|\\n      | '-'  .:|:. :   [||      ;|||        |  '-' .:|\\n  ,', ;.___</strong>.::-- ;---->'-,--,:-'&#x3C;'--------;.<strong>_</strong>.::.<code>.\\n (( ( )_;___,' ,' , ; //________( ) ))\\n</code>. _<code>--------' : -,' ' , ' '; //- _</code>--------' ,'\\n       __  .--'  ;,' ,'  ,  ': //    -.._    __  <em>.-  -\\n   `-   --    _ ;',' ,'  ,' ,;/</em>  -.       ---    <em>,\\n       _,.   /-:,</em>,<em>,</em>,<em>,</em>,<em>(/:-\\   ,     ,.    _\\n     -'   <code>-'--'-'-'-'-'-'-'-''--'-'</code>-'<code>'</code>'<code>'</code>-\\n\"\nprint 'Welcome to DIGITAL FORTRESS'\nwhile 1:\nprint 'Be carefull with your choice: '\nprint '1: Draw infinity map'\nprint '2: Go through all room on your map'\nchoice = '-1'\nwhile not choice.isdigit():\nchoice = raw</em>input(\"What's your choice: \")\nif choice not in ('1', '2'):\nchoice = '-1'</p>\n<pre><code>    choice = int(choice)\n    if choice == 1:\n        exec (urllib2.urlopen('http://material.wargame.whitehat.vn/contests/11/drawmap.py').read(), globals())\n    elif choice == 2:\n        exec (urllib2.urlopen('http://material.wargame.whitehat.vn/contests/11/letgo.py').read(), globals())\n</code></pre>\n<p>if <strong>name</strong> == '<strong>main</strong>':\nmain()\n`<code></code></p>\n<p>This shows that 2 more scripts are executed on running this exe.\n<a href=\"/drawmap-c822b769bcaf8f388ae23f98d1039e85.py\">drawmap.py</a> keeps creating folders in your cwd with prime numbered names.</p>\n<p>letgo.py</p>\n<p>`<code></code>python\nimport os</p>\n<p>def gothrough():\nkey = 1\nroomtogo = [r for r in os.listdir(os.curdir)if os.path.isdir(r)]\nfor room in roomtogo:\nkey *= int(room)\nos.system(\"start cmd /k echo Room number \" + room + \": get key part\")\nif (key == 1000012277050240711531267079):\nos.system(\"start cmd /k echo Congrats! Where did you get these key parts?\")\nelse:\nos.system(\"start cmd /k echo Nothing here! wrong key parts\")</p>\n<p>gothrough()\n`<code></code></p>\n<p><a href=\"/letgo-315fa5132c2d649108abf2b3ea652e75.py\">letgo.py</a> then traverses these folders then and checks the product of the traversed primes to be equal to 1000012277050240711531267079.\nSo flag is Easy\n`<code></code>python</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>from sympy import primefactors\nfactors=primefactors(1000012277050240711531267079)\nimport sha\nprint sha.new(':'.join(map(str,factors))).hexdigest()\n89225c98a509271436fd55c3c6aeef44fd07728a\n`<code></code></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>Flag : 89225c98a509271436fd55c3c6aeef44fd07728a</p>\n</blockquote>","relativePath":"writeups/whitehat-contest-11-2016/RE/RE3/sudhackar"}}