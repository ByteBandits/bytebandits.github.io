{"pageContext":{"html":"<p><a href=\"ctf=tu-ctf-2018\"></a>\n<a href=\"type=reversing\"></a>\n<a href=\"tags=malloc,memcpy\"></a>\n<a href=\"tools=radare2,gdb-peda\"></a></p>\n<h1>Shoop</h1>\n<p>We are given a <a href=\"/shoop-2f8a8ae9776221374ed720a719ac505b.\">binary</a> which accepts user input and validates it before printing the flag.</p>\n<pre><code class=\"language-bash\">vagrant@amy:~/share/shoop$ file shoop\nshoop: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=2569da7d2c1014488a9a5fad953f7e6d1791125e, not stripped\n</code></pre>\n<p>The disassembly can be viewed using a disassembler like <code>radare2</code>.</p>\n<pre><code class=\"language-assembly\">[0x00000990]> pdf\n┌ (fcn) main 518\n\n...\n\n│       ┌─&#x3C; 0x00000a4b      eb29           jmp 0xa76\n│       │   ; CODE XREF from main (0xa7a)\n│      ┌──> 0x00000a4d      8b45f0         mov eax, dword [nbyte]\n│      ╎│   0x00000a50      2b45fc         sub eax, dword [local_4h]\n│      ╎│   0x00000a53      4898           cdqe\n│      ╎│   0x00000a55      488d50ff       lea rdx, [rax - 1]\n│      ╎│   0x00000a59      488b45e0       mov rax, qword [s2]\n│      ╎│   0x00000a5d      4801c2         add rdx, rax                ; '#'\n│      ╎│   0x00000a60      8b45fc         mov eax, dword [local_4h]\n│      ╎│   0x00000a63      4863c8         movsxd rcx, eax\n│      ╎│   0x00000a66      488b45e8       mov rax, qword [buf]\n│      ╎│   0x00000a6a      4801c8         add rax, rcx                ; '&#x26;'\n│      ╎│   0x00000a6d      0fb600         movzx eax, byte [rax]\n│      ╎│   0x00000a70      8802           mov byte [rdx], al\n│      ╎│   0x00000a72      836dfc01       sub dword [local_4h], 1\n│      ╎│   ; CODE XREF from main (0xa4b)\n│      ╎└─> 0x00000a76      837dfc00       cmp dword [local_4h], 0\n│      └──&#x3C; 0x00000a7a      79d1           jns 0xa4d\n│           0x00000a7c      8b45f0         mov eax, dword [nbyte]\n│           0x00000a7f      4863d0         movsxd rdx, eax             ; size_t n\n│           0x00000a82      488b4de0       mov rcx, qword [s2]\n│           0x00000a86      488b45e8       mov rax, qword [buf]\n│           0x00000a8a      4889ce         mov rsi, rcx                ; const void *s2\n│           0x00000a8d      4889c7         mov rdi, rax                ; void *s1\n│           0x00000a90      e88bfdffff     call sym.imp.memcpy         ; void *memcpy(void *s1, const void *s2, size_t n)\n│           0x00000a95      c745f8000000.  mov dword [local_8h], 0\n│       ┌─&#x3C; 0x00000a9c      eb34           jmp 0xad2\n│       │   ; CODE XREF from main (0xad8)\n│      ┌──> 0x00000a9e      8b45f8         mov eax, dword [local_8h]\n│      ╎│   0x00000aa1      4863d0         movsxd rdx, eax\n│      ╎│   0x00000aa4      488b45e8       mov rax, qword [buf]\n│      ╎│   0x00000aa8      4801d0         add rax, rdx                ; '('\n│      ╎│   0x00000aab      0fb600         movzx eax, byte [rax]\n│      ╎│   0x00000aae      8845df         mov byte [local_21h], al\n│      ╎│   0x00000ab1      0fb645df       movzx eax, byte [local_21h]\n│      ╎│   0x00000ab5      83e805         sub eax, 5\n│      ╎│   0x00000ab8      8845de         mov byte [local_22h], al\n│      ╎│   0x00000abb      8b45f8         mov eax, dword [local_8h]\n│      ╎│   0x00000abe      4863d0         movsxd rdx, eax\n│      ╎│   0x00000ac1      488b45e8       mov rax, qword [buf]\n│      ╎│   0x00000ac5      4801c2         add rdx, rax                ; '#'\n│      ╎│   0x00000ac8      0fb645de       movzx eax, byte [local_22h]\n│      ╎│   0x00000acc      8802           mov byte [rdx], al\n│      ╎│   0x00000ace      8345f801       add dword [local_8h], 1\n│      ╎│   ; CODE XREF from main (0xa9c)\n│      ╎└─> 0x00000ad2      8b45f8         mov eax, dword [local_8h]\n│      ╎    0x00000ad5      3b45f0         cmp eax, dword [nbyte]\n│      └──&#x3C; 0x00000ad8      7cc4           jl 0xa9e\n│           0x00000ada      c745f4000000.  mov dword [local_ch], 0\n│       ┌─&#x3C; 0x00000ae1      eb30           jmp 0xb13\n│       │   ; CODE XREF from main (0xb19)\n│      ┌──> 0x00000ae3      8b45f4         mov eax, dword [local_ch]\n│      ╎│   0x00000ae6      83c00a         add eax, 0xa\n│      ╎│   0x00000ae9      99             cdq\n│      ╎│   0x00000aea      f77df0         idiv dword [nbyte]\n│      ╎│   0x00000aed      8955d8         mov dword [local_28h], edx\n│      ╎│   0x00000af0      8b45f4         mov eax, dword [local_ch]\n│      ╎│   0x00000af3      4863d0         movsxd rdx, eax\n│      ╎│   0x00000af6      488b45e0       mov rax, qword [s2]\n│      ╎│   0x00000afa      4801c2         add rdx, rax                ; '#'\n│      ╎│   0x00000afd      8b45d8         mov eax, dword [local_28h]\n│      ╎│   0x00000b00      4863c8         movsxd rcx, eax\n│      ╎│   0x00000b03      488b45e8       mov rax, qword [buf]\n│      ╎│   0x00000b07      4801c8         add rax, rcx                ; '&#x26;'\n│      ╎│   0x00000b0a      0fb600         movzx eax, byte [rax]\n│      ╎│   0x00000b0d      8802           mov byte [rdx], al\n│      ╎│   0x00000b0f      8345f401       add dword [local_ch], 1\n│      ╎│   ; CODE XREF from main (0xae1)\n│      ╎└─> 0x00000b13      8b45f4         mov eax, dword [local_ch]\n│      ╎    0x00000b16      3b45f0         cmp eax, dword [nbyte]\n│      └──&#x3C; 0x00000b19      7cc8           jl 0xae3\n│           0x00000b1b      8b45f0         mov eax, dword [nbyte]\n│           0x00000b1e      4863d0         movsxd rdx, eax             ; size_t n\n│           0x00000b21      488b4de0       mov rcx, qword [s2]\n│           0x00000b25      488b45e8       mov rax, qword [buf]\n│           0x00000b29      4889ce         mov rsi, rcx                ; const void *s2\n│           0x00000b2c      4889c7         mov rdi, rax                ; void *s1\n│           0x00000b2f      e8ecfcffff     call sym.imp.memcpy         ; void *memcpy(void *s1, const void *s2, size_t n)\n│           0x00000b34      488b45e8       mov rax, qword [buf]\n│           0x00000b38      4889c6         mov rsi, rax\n│           0x00000b3b      488d3dfa0000.  lea rdi, str.Survey_Says___s ; 0xc3c ; \"Survey Says! %s\\n\" ; const char *format\n│           0x00000b42      b800000000     mov eax, 0\n│           0x00000b47      e894fcffff     call sym.imp.printf         ; int printf(const char *format)\n│           0x00000b4c      8b45f0         mov eax, dword [nbyte]\n│           0x00000b4f      4863d0         movsxd rdx, eax             ; size_t n\n│           0x00000b52      488b45e8       mov rax, qword [buf]\n│           0x00000b56      488d35f00000.  lea rsi, str.jmt_j_tm_q_t_j_mpjtf ; 0xc4d ; \"jmt_j]tm`q`t_j]mpjtf^\" ; const void *s2\n│           0x00000b5d      4889c7         mov rdi, rax                ; const void *s1\n│           0x00000b60      e8abfcffff     call sym.imp.memcmp         ; int memcmp(const void *s1, const void *s2, size_t n)\n│           0x00000b65      85c0           test eax, eax\n│       ┌─&#x3C; 0x00000b67      751a           jne 0xb83\n│       │   0x00000b69      488d3df30000.  lea rdi, str.That_s_right   ; 0xc63 ; \"That's right!\" ; const char *s\n│       │   0x00000b70      e84bfcffff     call sym.imp.puts           ; int puts(const char *s)\n│       │   0x00000b75      488d3df50000.  lea rdi, str.bin_cat_._flag ; 0xc71 ; \"/bin/cat ./flag\" ; const char *string\n│       │   0x00000b7c      e84ffcffff     call sym.imp.system         ; int system(const char *string)\n...\n</code></pre>\n<p>This roughly corresponds to:</p>\n<pre><code class=\"language-c\">char s[21] = (char*)malloc(21);\nchar t[21] = (char*)malloc(21);\n\nread(s, 0, 21);\n\nfor (int i = 20; i >= 0; i--)\n    t[20-i] = s[i];\n\nfor (int i = 0; i &#x3C; 21; i++)\n    s[j] -= 5;\n\nfor (int i = 0; i &#x3C; 21; i++)\n    t[i] = s[(i + 10) % 21];\n\nif (!memcmp(t, \"jmt_j]tm`q`t_j]mpjtf^\", 21))\n    //print flag\n</code></pre>\n<p>The final string <code>jmt_j]tm</code>q<code>t_j]mpjtf^</code> used in the <code>memcmp</code> at <code>0x00000b60</code> can easily be reversed to the corresponding input.</p>\n<pre><code class=\"language-python\">ans = 'jmt_j]tm`q`t_j]mpjtf^'\nans = map(lambda x: chr(ord(x) + 5), ans)\n\ns = ['' for i in range(len(ans))]\n\nfor i in range(len(ans)):\n    j = (i - 10) % 21\n    s[i] = ans[j]\n\nprint ''.join(s)[::-1]\n\n# everybodyrockyourbody\n</code></pre>\n<p>Providing the input to the server gives us the flag.</p>\n<p>Flag</p>\n<blockquote>\n<p>TUCTF{5w337<em>dr34m5</em>4r3<em>m4d3</em>0f_7h353}</p>\n</blockquote>"}}