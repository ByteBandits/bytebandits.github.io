{"pageContext":{"html":"<p><a href=\"ctf=whitehat-contest-11-2016\"></a>\n<a href=\"type=rev\"></a>\n<a href=\"tags=py2exe\"></a>\n<a href=\"tool=unpy2exe\"></a></p>\n<h1>RE3 (rev 100)</h1>\n<p>So we have an <a href=\"/digital_fortrees-8b26056ece5452dfcdbbd45fd9e2e93a.exe\">exe file</a></p>\n<pre><code class=\"language-bash\">$ file digital_fortrees.exe\ndigital_fortrees.exe: PE32 executable (console) Intel 80386, for MS Windows\n$ strings digital_fortrees.exe\n!This program cannot be run in DOS mode.\n.\n.\n&#x3C;pythondll>\nLoadLibrary(pythondll) failed\n.\n</code></pre>\n<p>This suggests the executable was made using <a href=\"http://www.py2exe.org/\">py2exe</a>. Byte compiled pyc files can be easily fished out from such exe using <a href=\"https://github.com/matiasb/unpy2exe\">unpy2exe</a>. We take out the pyc file and then use <a href=\"https://sourceforge.net/projects/easypythondecompiler/\">Easy Python Decompiler</a> to get</p>\n<pre><code class=\"language-python\"># Embedded file name: digital_fortrees.py\nimport urllib2\n\ndef main():\n    print \"                                       /\\\\\\n                                      /`:\\\\\\n                                     /`'`:\\\\\\n                                    /`'`'`:\\\\\\n                                   /`'`'`'`:\\\\\\n                                  /`'`'`'`'`:\\\\\\n                                   |`'`'`'`:|\\n     _ _  _  _  _                  |] ,-.  :|_  _  _  _\\n    ||| || || || |                 |  |_| ||| || || || |\\n    |`' `' `' `'.|                 | _'=' |`' `' `' `'.|\\n    :          .:;                 |'-'   :          .:;\\n     \\\\-..____..:/  _  _  _  _  _  _| _  _'-\\\\-..____..:/\\n      :--------:_,' || || || || || || || `.::--------:\\n      |]     .:|:.  `' `'_`' `' `' `' `'    | '-'  .:|\\n      |  ,-. .[|:._     '-' ____     ___    |   ,-.'-|\\n      |  | | .:|'--'_     ,'____`.  '---'   |   | |.:|\\n      |  |_| .:|:.'--' ()/,| |`|`.\\\\()   __  |   |_|.:|\\n      |  '=' .:|:.     |::_|_|_|\\\\|::   '--' |  _'='.:|\\n      | __   .:|:.     ;||-,-,-,-,|;        | '--' .:|\\n      |'--'  .:|:. _  ; ||       |:|        |      .:|\\n      |      .:|:.'-':  ||       |;|     _  |]     _:|\\n      |      '-|:.   ;  ||       :||    '-' |     '--|\\n      |  _   .:|].  ;   ||       ;||]       |   _  .:|\\n      | '-'  .:|:. :   [||      ;|||        |  '-' .:|\\n  ,', ;._____.::-- ;---->'-,--,:-'&#x3C;'--------;._____.::.`.\\n ((  (          )_;___,' ,' ,  ; //________(          ) ))\\n  `. _`--------' : -,' ' , ' '; //-       _ `--------' ,'\\n       __  .--'  ;,' ,'  ,  ': //    -.._    __  _.-  -\\n   `-   --    _ ;',' ,'  ,' ,;/_  -.       ---    _,\\n       _,.   /-:,_,_,_,_,_,_(/:-\\\\   ,     ,.    _\\n     -'   `-'--'-'-'-'-'-'-'-''--'-' `-'`'  `'`' `-\\n\"\n    print 'Welcome to DIGITAL FORTRESS'\n    while 1:\n        print 'Be carefull with your choice: '\n        print '1: Draw infinity map'\n        print '2: Go through all room on your map'\n        choice = '-1'\n        while not choice.isdigit():\n            choice = raw_input(\"What's your choice: \")\n            if choice not in ('1', '2'):\n                choice = '-1'\n\n        choice = int(choice)\n        if choice == 1:\n            exec (urllib2.urlopen('http://material.wargame.whitehat.vn/contests/11/drawmap.py').read(), globals())\n        elif choice == 2:\n            exec (urllib2.urlopen('http://material.wargame.whitehat.vn/contests/11/letgo.py').read(), globals())\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>This shows that 2 more scripts are executed on running this exe.\n<a href=\"/drawmap-c822b769bcaf8f388ae23f98d1039e85.py\">drawmap.py</a> keeps creating folders in your cwd with prime numbered names.</p>\n<p>letgo.py</p>\n<pre><code class=\"language-python\">import os\n\ndef gothrough():\n    key = 1\n    roomtogo = [r for r in os.listdir(os.curdir)if os.path.isdir(r)]\n    for room in roomtogo:\n        key *= int(room)\n        os.system(\"start cmd /k echo Room number \" + room + \": get key part\")\n    if (key == 1000012277050240711531267079):\n        os.system(\"start cmd /k echo Congrats! Where did you get these key parts?\")\n    else:\n        os.system(\"start cmd /k echo Nothing here! wrong key parts\")\n\ngothrough()\n</code></pre>\n<p><a href=\"/letgo-315fa5132c2d649108abf2b3ea652e75.py\">letgo.py</a> then traverses these folders then and checks the product of the traversed primes to be equal to 1000012277050240711531267079.\nSo flag is Easy</p>\n<pre><code class=\"language-python\">>>> from sympy import primefactors\n>>> factors=primefactors(1000012277050240711531267079)\n>>> import sha\n>>> print sha.new(':'.join(map(str,factors))).hexdigest()\n89225c98a509271436fd55c3c6aeef44fd07728a\n</code></pre>\n<blockquote>\n<p>Flag : 89225c98a509271436fd55c3c6aeef44fd07728a</p>\n</blockquote>"}}