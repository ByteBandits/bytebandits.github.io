{"componentChunkName":"component---src-templates-writeup-js","path":"/writeups/watevr-2019/rev/repyc/vn-ki","result":{"pageContext":{"html":"<h1>Repyc</h1>\n<h4>Category: Rev</h4>\n<h4>Points: 147</h4>\n<p>This was a python bytecode reversing challenge. We are given a python 3.6 bytecode compiled <a href=\"/d58481f7cf24bf8a6d15f5306b87d92d/decomp.py\">file</a>.\nOnce decompiled we get a python file with variables as unicode characters.</p>\n<pre><code class=\"language-python\">佤 = 0\n侰 = ~佤 * ~佤\n俴 = 侰 + 侰\n\ndef 䯂(䵦):\n    굴 = 佤\n    굿 = 佤\n    괠 = [佤] * 俴 ** (俴 * 俴)\n    궓 = [佤] * 100\n    괣 = []\n    while 䵦[굴][佤] != '듃':\n        굸 = 䵦[굴][佤].lower()\n        亀 = 䵦[굴][侰:]\n        if 굸 == '뉃':\n            괠[亀[佤]] = 괠[亀[侰]] + 괠[亀[俴]]\n        elif 굸 == '렀':\n            괠[亀[佤]] = 괠[亀[侰]] ^ 괠[亀[俴]]\n        elif 굸 == '렳':\n            괠[亀[佤]] = 괠[亀[侰]] - 괠[亀[俴]]\n        elif 굸 == '냃':\n            괠[亀[佤]] = 괠[亀[侰]] * 괠[亀[俴]]\n        elif 굸 == '뢯':\n            괠[亀[佤]] = 괠[亀[侰]] / 괠[亀[俴]]\n        elif 굸 == '륇':\n            괠[亀[佤]] = 괠[亀[侰]] &#x26; 괠[亀[俴]]\n        elif 굸 == '맳':\n            괠[亀[佤]] = 괠[亀[侰]] | 괠[亀[俴]]\n        elif 굸 == '괡':\n            괠[亀[佤]] = 괠[亀[佤]]\n        elif 굸 == '뫇':\n            괠[亀[佤]] = 괠[亀[侰]]\n</code></pre>\n<p>I thought this was some obfuscation technique and wasted some time looking for deobfuscators.</p>\n<p>Then I tried to rename the variables and try to make sense of the code.</p>\n<p>The function is later called with a list of lists.</p>\n<pre><code class=\"language-python\"> ['꽺', 0, 0],\n ['꼖',\n  6,\n  'á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜ\\x97ÉïÙãäãÖÓ\\x9aÕÙÛ\\x99á×äÕà©â«³£ï²ÕÔÈ·±â¨ë'],\n ['꼖', 2, 120],\n</code></pre>\n<p>After soem renaming, we can see the function acts as an executor and the list is a list of commands.</p>\n<p>The control flow of deobfuscation is wrong. We can see this by executing both pyc and decompiled py file.</p>\n<p>So I used pdb to step through the bytecode.</p>\n<pre><code class=\"language-sh\">$ python -i 3nohtyp.pyc\nAuthentication token: Traceback (most recent call last):\n  File \"circ.py\", line 135, in &#x3C;module>\n  File \"circ.py\", line 45, in 䯂\nKeyboardInterrupt\n>>> import pdb\n>>> pdb.runcall(䯂, 䯂)\n> /home/vn-ki/ctf/watevr/repyc/circ.py(5)䯂()\n(Pdb)\n</code></pre>\n<p>We can see that our input is processed by subtracting 15 and xoring with 135.</p>\n<p>The following script solves for the flag.</p>\n<pre><code class=\"language-python\">t = 'á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜ\\x97ÉïÙãäãÖÓ\\x9aÕÙÛ\\x99á×äÕà©â«³£ï²ÕÔÈ·±â¨ë'\ns = ''\nfor i in range(len(t)):\n  s += chr((ord(t[i]) + 15)^135)\nprint(s)\n</code></pre>\n<p>flag: <code>watevr{this_must_be_the_best_encryption_method_evr_henceforth_this_is_the_new_Advanced_Encryption_Standard_anyways_i_dont_really_have_a_good_vid_but_i_really_enjoy_this_song_i_hope_you_will_enjoy_it_aswell!_youtube.com/watch?v=E5yFcdPAGv0}</code></p>","relativePath":"writeups/watevr-2019/rev/repyc/vn-ki"}}}