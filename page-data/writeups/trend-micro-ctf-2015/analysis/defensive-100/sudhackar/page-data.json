{"componentChunkName":"component---src-templates-writeup-js","path":"/writeups/trend-micro-ctf-2015/analysis/defensive-100/sudhackar","result":{"pageContext":{"html":"<p><a href=\"ctf=trend-micro-ctf-2015\"></a>\n<a href=\"type=analysis,reverse\"></a>\n<a href=\"tags=payload,drop\"></a>\n<a href=\"tools=gdb-peda\"></a>\n<a href=\"techniques=breakpoints\"></a></p>\n<p>I think this is the unintended solution.</p>\n<p>We are given a <a href=\"/7b6ebb69d836be03612c395126b606a6/vonn.zip\">zip</a> password:wx5tOCvU3g2FmueLEvj5np9xJX0cND3K.\nThis gives us a binary.</p>\n<pre><code class=\"language-sh\">$ file vonn \nvonn: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=7f89c2bb36cc9d0882a4980a99d44a7674fb09e2, not stripped\n\n$ ./vonn \nYou are not on VMM\n</code></pre>\n<p>Thats it! we don't know whats happening.\nSo i quickly load it with gdb-peda and after setting some breakpoints,we're ready to step through the execution.</p>\n<pre><code class=\"language-sh\">gdb-peda$ b *0x400b8d\nBreakpoint 1 at 0x400b8d\n</code></pre>\n<p>After some stepping when we get to puts call for output</p>\n<pre><code class=\"language-objdump\">   0x400cd3 &#x3C;main+326>: cmp    rax,QWORD PTR [rbp-0x8]\n   0x400cd7 &#x3C;main+330>: je     0x400cfc &#x3C;main+367>\n   0x400cd9 &#x3C;main+332>: mov    edi,0x401100\n=> 0x400cde &#x3C;main+337>: call   0x400990 &#x3C;puts@plt>\n   0x400ce3 &#x3C;main+342>: mov    rax,QWORD PTR [rbp-0xd0]\n   0x400cea &#x3C;main+349>: mov    rax,QWORD PTR [rax]\n   0x400ced &#x3C;main+352>: mov    rdi,rax\n   0x400cf0 &#x3C;main+355>: mov    eax,0x0\nGuessed arguments:\narg[0]: 0x401100 (\"You are on VMM!\")\n</code></pre>\n<p>And I still don't know how!!\nAll thats left is to do a c(continue).</p>\n<pre><code class=\"language-sh\">gdb-peda$ c\nContinuing.\nYou are on VMM!\nprocess 9248 is executing new program: /tmp/...,,,...,,\nwarning: the debug information found in \"/lib64/ld-2.19.so\" does not match \"/lib64/ld-linux-x86-64.so.2\" (CRC mismatch).\n</code></pre>\n<p>This file dropped a payload that was automatically loaded in gdb. Nice!!\nLucky for me the breakpoint 0x400b8d is still an instruction in the payload binary. </p>\n<pre><code class=\"language-objdump\">   0x0000000000400b74 &#x3C;+248>:   call   0x400790 &#x3C;MD5@plt>\n   0x0000000000400b79 &#x3C;+253>:   mov    edi,0x54\n   0x0000000000400b7e &#x3C;+258>:   call   0x400780 &#x3C;putchar@plt>\n   0x0000000000400b83 &#x3C;+263>:   mov    edi,0x4d\n   0x0000000000400b88 &#x3C;+268>:   call   0x400780 &#x3C;putchar@plt>\n=> 0x0000000000400b8d &#x3C;+273>:   mov    edi,0x43\n   0x0000000000400b92 &#x3C;+278>:   call   0x400780 &#x3C;putchar@plt>\n   0x0000000000400b97 &#x3C;+283>:   mov    edi,0x54\n   0x0000000000400b9c &#x3C;+288>:   call   0x400780 &#x3C;putchar@plt>\n   0x0000000000400ba1 &#x3C;+293>:   mov    edi,0x46\n   0x0000000000400ba6 &#x3C;+298>:   call   0x400780 &#x3C;putchar@plt>\n   0x0000000000400bab &#x3C;+303>:   mov    edi,0x7b\n   0x0000000000400bb0 &#x3C;+308>:   call   0x400780 &#x3C;putchar@plt>\n   0x0000000000400bb5 &#x3C;+313>:   mov    DWORD PTR [rbp-0xc4],0x0\n   0x0000000000400bbf &#x3C;+323>:   jmp    0x400be9 &#x3C;rnktmp+365>\n</code></pre>\n<p>Looks good. Another c(continue)</p>\n<pre><code class=\"language-sh\">gdb-peda$ c\nContinuing.\nTMCTF{ce5d8bb4d5efe86d25098bec300d6954}[Inferior 1 (process 9248) exited with code 0377]\n/tmp/...,,,...,,: No such file or directory.\n</code></pre>\n<p>Huh! Was easier than expected.\nFLAG</p>\n<blockquote>\n<p>TMCTF{ce5d8bb4d5efe86d25098bec300d6954}</p>\n</blockquote>","relativePath":"writeups/trend-micro-ctf-2015/analysis/defensive-100/sudhackar"}}}